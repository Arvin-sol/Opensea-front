{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar internal_1 = require(\"./internal\");\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nvar defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label === void 0) {\n      label = false;\n    }\n\n    if (label) {\n      var obj_1 = {};\n\n      self._fields.forEach(function (field) {\n        obj_1[field] = \"0x\".concat(self[field].toString('hex'));\n      });\n\n      return obj_1;\n    }\n\n    return (0, bytes_1.baToJSON)(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return externals_1.rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = (0, bytes_1.toBuffer)(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = (0, bytes_1.unpadBuffer)(v);\n        (0, assert_1.default)(field.length >= v.length, \"The field \".concat(field.name, \" must not have more \").concat(field.length, \" bytes\"));\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        (0, assert_1.default)(field.length === v.length, \"The field \".concat(field.name, \" must have byte length of \").concat(field.length));\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = externals_1.rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = (0, bytes_1.toBuffer)(d);\n      });\n    } else if (typeof data === 'object') {\n      var keys_1 = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};\n\nexports.defineProperties = defineProperties;","map":{"version":3,"sources":["../src/object.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar internal_1 = require(\"./internal\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nvar defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label) {\n        if (label === void 0) { label = false; }\n        if (label) {\n            var obj_1 = {};\n            self._fields.forEach(function (field) {\n                obj_1[field] = \"0x\".concat(self[field].toString('hex'));\n            });\n            return obj_1;\n        }\n        return (0, bytes_1.baToJSON)(self.raw);\n    };\n    self.serialize = function serialize() {\n        return externals_1.rlp.encode(self.raw);\n    };\n    fields.forEach(function (field, i) {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = (0, bytes_1.toBuffer)(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = (0, bytes_1.unpadBuffer)(v);\n                (0, assert_1.default)(field.length >= v.length, \"The field \".concat(field.name, \" must not have more \").concat(field.length, \" bytes\"));\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                (0, assert_1.default)(field.length === v.length, \"The field \".concat(field.name, \" must have byte length of \").concat(field.length));\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter,\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter,\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = externals_1.rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach(function (d, i) {\n                self[self._fields[i]] = (0, bytes_1.toBuffer)(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            var keys_1 = Object.keys(data);\n            fields.forEach(function (field) {\n                if (keys_1.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys_1.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\nexports.defineProperties = defineProperties;\n//# sourceMappingURL=object.js.map"]},"metadata":{},"sourceType":"script"}