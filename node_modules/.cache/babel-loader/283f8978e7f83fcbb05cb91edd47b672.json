{"ast":null,"code":"\"use strict\";\n\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexDataLength, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n\n  return _curve;\n}\n\nexport class SigningKey {\n  constructor(privateKey) {\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n\n    if (hexDataLength(this.privateKey) !== 32) {\n      logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n    }\n\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n\n  _addPoint(other) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  }\n\n  signDigest(digest) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const digestBytes = arrayify(digest);\n\n    if (digestBytes.length !== 32) {\n      logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n    }\n\n    const signature = keyPair.sign(digestBytes, {\n      canonical: true\n    });\n    return splitSignature({\n      recoveryParam: signature.recoveryParam,\n      r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n      s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n    });\n  }\n\n  computeSharedSecret(otherKey) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n    return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  }\n\n  static isSigningKey(value) {\n    return !!(value && value._isSigningKey);\n  }\n\n}\nexport function recoverPublicKey(digest, signature) {\n  const sig = splitSignature(signature);\n  const rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  const bytes = arrayify(key);\n\n  if (bytes.length === 32) {\n    const signingKey = new SigningKey(bytes);\n\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexDataLength, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\nexport class SigningKey {\n    constructor(privateKey) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 = getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n}\nexport function recoverPublicKey(digest, signature) {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n    const bytes = arrayify(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}