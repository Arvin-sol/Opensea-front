{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar externals_1 = require(\"./externals\");\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar internal_1 = require(\"./internal\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nvar Account =\n/** @class */\nfunction () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account(nonce, balance, stateRoot, codeHash) {\n    if (nonce === void 0) {\n      nonce = new externals_1.BN(0);\n    }\n\n    if (balance === void 0) {\n      balance = new externals_1.BN(0);\n    }\n\n    if (stateRoot === void 0) {\n      stateRoot = constants_1.KECCAK256_RLP;\n    }\n\n    if (codeHash === void 0) {\n      codeHash = constants_1.KECCAK256_NULL;\n    }\n\n    this.nonce = nonce;\n    this.balance = balance;\n    this.stateRoot = stateRoot;\n    this.codeHash = codeHash;\n\n    this._validate();\n  }\n\n  Account.fromAccountData = function (accountData) {\n    var nonce = accountData.nonce,\n        balance = accountData.balance,\n        stateRoot = accountData.stateRoot,\n        codeHash = accountData.codeHash;\n    return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n  };\n\n  Account.fromRlpSerializedAccount = function (serialized) {\n    var values = externals_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array');\n    }\n\n    return this.fromValuesArray(values);\n  };\n\n  Account.fromValuesArray = function (values) {\n    var _a = __read(values, 4),\n        nonce = _a[0],\n        balance = _a[1],\n        stateRoot = _a[2],\n        codeHash = _a[3];\n\n    return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n  };\n\n  Account.prototype._validate = function () {\n    if (this.nonce.lt(new externals_1.BN(0))) {\n      throw new Error('nonce must be greater than zero');\n    }\n\n    if (this.balance.lt(new externals_1.BN(0))) {\n      throw new Error('balance must be greater than zero');\n    }\n\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32');\n    }\n\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32');\n    }\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n\n\n  Account.prototype.raw = function () {\n    return [(0, types_1.bnToUnpaddedBuffer)(this.nonce), (0, types_1.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];\n  };\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n\n\n  Account.prototype.serialize = function () {\n    return externals_1.rlp.encode(this.raw());\n  };\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n\n\n  Account.prototype.isContract = function () {\n    return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n\n\n  Account.prototype.isEmpty = function () {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n\n  return Account;\n}();\n\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\n\nvar isValidAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\n\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  (0, helpers_1.assertIsHexString)(hexAddress);\n  var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n  var prefix = '';\n\n  if (eip1191ChainId) {\n    var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n    prefix = chainId.toString() + '0x';\n  }\n\n  var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\n\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\n\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\n\nvar generateAddress = function (from, nonce) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(nonce);\n  var nonceBN = new externals_1.BN(nonce);\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return (0, hash_1.rlphash)([from, null]).slice(-20);\n  } // Only take the lower 160bits of the hash\n\n\n  return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\n\nvar generateAddress2 = function (from, salt, initCode) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(salt);\n  (0, helpers_1.assertIsBuffer)(initCode);\n  (0, assert_1.default)(from.length === 20);\n  (0, assert_1.default)(salt.length === 32);\n  var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n  return address.slice(-20);\n};\n\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\n\nvar isValidPrivate = function (privateKey) {\n  return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\n\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\nvar isValidPublic = function (publicKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  (0, helpers_1.assertIsBuffer)(publicKey);\n\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\n\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\nvar pubToAddress = function (pubKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  (0, helpers_1.assertIsBuffer)(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n  }\n\n  (0, assert_1.default)(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return (0, hash_1.keccak)(pubKey).slice(-20);\n};\n\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nvar privateToPublic = function (privateKey) {\n  (0, helpers_1.assertIsBuffer)(privateKey); // skip the type flag and use the X, Y points\n\n  return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\n\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nvar privateToAddress = function (privateKey) {\n  return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\n\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\n\nvar importPublic = function (publicKey) {\n  (0, helpers_1.assertIsBuffer)(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n  }\n\n  return publicKey;\n};\n\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\n\nvar zeroAddress = function () {\n  var addressLength = 20;\n  var addr = (0, bytes_1.zeros)(addressLength);\n  return (0, bytes_1.bufferToHex)(addr);\n};\n\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\n\nvar isZeroAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  var zeroAddr = (0, exports.zeroAddress)();\n  return zeroAddr === hexAddress;\n};\n\nexports.isZeroAddress = isZeroAddress;","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar internal_1 = require(\"./internal\");\nvar constants_1 = require(\"./constants\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nvar Account = /** @class */ (function () {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    function Account(nonce, balance, stateRoot, codeHash) {\n        if (nonce === void 0) { nonce = new externals_1.BN(0); }\n        if (balance === void 0) { balance = new externals_1.BN(0); }\n        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }\n        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    Account.fromAccountData = function (accountData) {\n        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;\n        return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    };\n    Account.fromRlpSerializedAccount = function (serialized) {\n        var values = externals_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    };\n    Account.fromValuesArray = function (values) {\n        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];\n        return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n    };\n    Account.prototype._validate = function () {\n        if (this.nonce.lt(new externals_1.BN(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new externals_1.BN(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    Account.prototype.raw = function () {\n        return [\n            (0, types_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, types_1.bnToUnpaddedBuffer)(this.balance),\n            this.stateRoot,\n            this.codeHash,\n        ];\n    };\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    Account.prototype.serialize = function () {\n        return externals_1.rlp.encode(this.raw());\n    };\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    Account.prototype.isContract = function () {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    Account.prototype.isEmpty = function () {\n        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    return Account;\n}());\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nvar isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    var prefix = '';\n    if (eip1191ChainId) {\n        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n        prefix = chainId.toString() + '0x';\n    }\n    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nvar generateAddress = function (from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    var nonceBN = new externals_1.BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0, hash_1.rlphash)([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nvar generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    (0, assert_1.default)(from.length === 20);\n    (0, assert_1.default)(salt.length === 32);\n    var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n    return address.slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nvar isValidPrivate = function (privateKey) {\n    return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n    }\n    (0, assert_1.default)(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.keccak)(pubKey).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToPublic = function (privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nvar importPublic = function (publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nvar zeroAddress = function () {\n    var addressLength = 20;\n    var addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nvar isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    var zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}