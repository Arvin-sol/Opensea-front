{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n  constructor(type, localName) {\n    super(type, type, localName, true);\n  }\n\n  defaultValue() {\n    return \"0x\";\n  }\n\n  encode(writer, value) {\n    value = arrayify(value);\n    let length = writer.writeValue(value.length);\n    length += writer.writeBytes(value);\n    return length;\n  }\n\n  decode(reader) {\n    return reader.readBytes(reader.readValue().toNumber(), true);\n  }\n\n}\nexport class BytesCoder extends DynamicBytesCoder {\n  constructor(localName) {\n    super(\"bytes\", localName);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(super.decode(reader)));\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/bytes.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,EAAmB,OAAnB,QAAkC,sBAAlC;AAEA,SAAS,KAAT,QAAsC,kBAAtC;AAEA,OAAM,MAAO,iBAAP,SAAiC,KAAjC,CAAsC;EACxC,WAAA,CAAY,IAAZ,EAA0B,SAA1B,EAA2C;IACxC,MAAM,IAAN,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,IAA7B;EACF;;EAED,YAAY,GAAA;IACR,OAAO,IAAP;EACH;;EAED,MAAM,CAAC,MAAD,EAAiB,KAAjB,EAA2B;IAC7B,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAhB;IACA,IAAI,MAAM,GAAG,MAAM,CAAC,UAAP,CAAkB,KAAK,CAAC,MAAxB,CAAb;IACA,MAAM,IAAI,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAV;IACA,OAAO,MAAP;EACH;;EAED,MAAM,CAAC,MAAD,EAAe;IACjB,OAAO,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,SAAP,GAAmB,QAAnB,EAAjB,EAAgD,IAAhD,CAAP;EACH;;AAlBuC;AAqB5C,OAAM,MAAO,UAAP,SAA0B,iBAA1B,CAA2C;EAC7C,WAAA,CAAY,SAAZ,EAA6B;IACzB,MAAM,OAAN,EAAe,SAAf;EACH;;EAED,MAAM,CAAC,MAAD,EAAe;IACjB,OAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,OAAO,CAAC,MAAM,MAAN,CAAa,MAAb,CAAD,CAAhC,CAAP;EACH;;AAP4C","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"module"}