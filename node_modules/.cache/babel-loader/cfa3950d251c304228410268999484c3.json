{"ast":null,"code":"const {\n  Transform\n} = require('readable-stream');\n\nmodule.exports = KeccakState => class Keccak extends Transform {\n  constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._hashBitLength = hashBitLength;\n    this._options = options;\n    this._state = new KeccakState();\n\n    this._state.initialize(rate, capacity);\n\n    this._finalized = false;\n  }\n\n  _transform(chunk, encoding, callback) {\n    let error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  _flush(callback) {\n    let error = null;\n\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n    this._state.absorb(data);\n\n    return this;\n  }\n\n  digest(encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n\n    let digest = this._state.squeeze(this._hashBitLength / 8);\n\n    if (encoding !== undefined) digest = digest.toString(encoding);\n\n    this._resetState();\n\n    return digest;\n  } // remove result from memory\n\n\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n\n    return this;\n  } // because sometimes we need hash right now and little later\n\n\n  _clone() {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n\n    this._state.copy(clone._state);\n\n    clone._finalized = this._finalized;\n    return clone;\n  }\n\n};","map":{"version":3,"names":["Transform","require","module","exports","KeccakState","Keccak","constructor","rate","capacity","delimitedSuffix","hashBitLength","options","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","push","digest","data","Buffer","isBuffer","TypeError","Error","from","absorb","absorbLastFewBits","squeeze","undefined","toString","_resetState","_clone","clone","copy"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/keccak/lib/api/keccak.js"],"sourcesContent":["const { Transform } = require('readable-stream')\n\nmodule.exports = (KeccakState) => class Keccak extends Transform {\n  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    let digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  _resetState () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone () {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}