{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport class Coder {\n  constructor(name, type, localName, dynamic) {\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _throwError(message, value) {\n    logger.throwArgumentError(message, this.localName, value);\n  }\n\n}\nexport class Writer {\n  constructor(wordSize) {\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  get data() {\n    return hexConcat(this._data);\n  }\n\n  get length() {\n    return this._dataLength;\n  }\n\n  _writeData(data) {\n    this._data.push(data);\n\n    this._dataLength += data.length;\n    return data.length;\n  }\n\n  appendWriter(writer) {\n    return this._writeData(concat(writer._data));\n  } // Arrayish items; padded on the right to wordSize\n\n\n  writeBytes(value) {\n    let bytes = arrayify(value);\n    const paddingOffset = bytes.length % this.wordSize;\n\n    if (paddingOffset) {\n      bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n    }\n\n    return this._writeData(bytes);\n  }\n\n  _getValue(value) {\n    let bytes = arrayify(BigNumber.from(value));\n\n    if (bytes.length > this.wordSize) {\n      logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n        length: this.wordSize,\n        offset: bytes.length\n      });\n    }\n\n    if (bytes.length % this.wordSize) {\n      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n    }\n\n    return bytes;\n  } // BigNumberish items; padded on the left to wordSize\n\n\n  writeValue(value) {\n    return this._writeData(this._getValue(value));\n  }\n\n  writeUpdatableValue() {\n    const offset = this._data.length;\n\n    this._data.push(this._padding);\n\n    this._dataLength += this.wordSize;\n    return value => {\n      this._data[offset] = this._getValue(value);\n    };\n  }\n\n}\nexport class Reader {\n  constructor(data, wordSize, coerceFunc, allowLoose) {\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n\n  get data() {\n    return hexlify(this._data);\n  }\n\n  get consumed() {\n    return this._offset;\n  } // The default Coerce function\n\n\n  static coerce(name, value) {\n    let match = name.match(\"^u?int([0-9]+)$\");\n\n    if (match && parseInt(match[1]) <= 48) {\n      value = value.toNumber();\n    }\n\n    return value;\n  }\n\n  coerce(name, value) {\n    if (this._coerceFunc) {\n      return this._coerceFunc(name, value);\n    }\n\n    return Reader.coerce(name, value);\n  }\n\n  _peekBytes(offset, length, loose) {\n    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n    if (this._offset + alignedLength > this._data.length) {\n      if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n        alignedLength = length;\n      } else {\n        logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this._data.length,\n          offset: this._offset + alignedLength\n        });\n      }\n    }\n\n    return this._data.slice(this._offset, this._offset + alignedLength);\n  }\n\n  subReader(offset) {\n    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n  }\n\n  readBytes(length, loose) {\n    let bytes = this._peekBytes(0, length, !!loose);\n\n    this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n    return bytes.slice(0, length);\n  }\n\n  readValue() {\n    return BigNumber.from(this.readBytes(this.wordSize));\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/abstract-coder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map"]},"metadata":{},"sourceType":"module"}