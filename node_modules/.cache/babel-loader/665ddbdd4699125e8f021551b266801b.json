{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nconst {\n  callbackify\n} = require('util');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar Jsonrpc = require('./jsonrpc.js');\n\nvar BatchManager = require('./batch.js');\n\nvar givenProvider = require('./givenProvider.js');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\n\n\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\n\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\n\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this; // autodetect provider\n\n\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider); // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider); // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  } // reset the old one before changing, if still connected\n\n\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null; // listen to incoming notifications\n\n  if (this.provider && this.provider.on) {\n    if (typeof provider.request === 'function') {\n      // EIP-1193 provider\n      this.provider.on('message', function (payload) {\n        if (payload && payload.type === 'eth_subscription' && payload.data) {\n          const data = payload.data;\n\n          if (data.subscription && _this.subscriptions.has(data.subscription)) {\n            _this.subscriptions.get(data.subscription).callback(null, data.result);\n          }\n        }\n      });\n    } else {\n      // legacy provider subscription event\n      this.provider.on('data', function data(result, deprecatedResult) {\n        result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n        // if result is a subscription, call callback for that subscription\n\n        if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n          _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n        }\n      });\n    } // resubscribe if the provider has reconnected\n\n\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    }); // notify all subscriptions about the error condition\n\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    }); // notify all subscriptions about bad close conditions\n\n    const disconnect = function disconnect(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    };\n\n    this.provider.on('disconnect', disconnect); // TODO add end, timeout??\n  }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  const {\n    method,\n    params\n  } = data;\n  const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n\n  const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n\n  if (this.provider.request) {\n    const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n    const requestArgs = {\n      method,\n      params\n    };\n    callbackRequest(requestArgs, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n  } else if (this.provider.send) {\n    this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!Array.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(null, results);\n  });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\n\n\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\n\n\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type; // remove subscription first to avoid reentry\n\n    this.subscriptions.delete(id); // then, try to actually unsubscribe\n\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */\n\n\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  try {\n    var _this = this; // uninstall all subscriptions\n\n\n    if (this.subscriptions.size > 0) {\n      this.subscriptions.forEach(function (value, id) {\n        if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n      });\n    } //  reset notification callbacks etc.\n\n\n    if (this.provider.reset) this.provider.reset();\n    return true;\n  } catch (e) {\n    throw new Error(`Error while clearing subscriptions: ${e}`);\n  }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\n\n\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\n\n\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */\n\n\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n  return function (err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n    }\n\n    if (err) {\n      return callback(err);\n    }\n\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n\n    callback(null, result.result);\n  };\n};\n\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"names":["callbackify","require","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","net","providers","setProvider","subscriptions","Map","WebsocketProvider","HttpProvider","IpcProvider","prototype","_this","test","connect","Error","connected","clearSubscriptions","on","request","payload","type","data","subscription","has","get","callback","result","deprecatedResult","method","params","forEach","resubscribe","error","disconnect","event","_isCleanCloseEvent","_isIpcCloseError","ConnectionCloseError","delete","id","emit","send","InvalidProvider","jsonrpcPayload","toPayload","jsonrpcResultCallback","_jsonrpcResultCallback","callbackRequest","bind","requestArgs","sendAsync","sendBatch","toBatchPayload","err","results","Array","isArray","InvalidResponse","addSubscription","set","constructor","name","removeSubscription","options","keepIsSyncing","size","value","reset","e","includes","code","wasClean","JSON","stringify","ErrorResponse","isValidResponse","module","exports","Manager"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/web3-core-requestmanager/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\nconst { callbackify } = require('util');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n    var _this = this;\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n            // WS\n        }\n        else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n            // IPC\n        }\n        else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n            provider = new this.providers.IpcProvider(provider, net);\n        }\n        else if (provider) {\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n        }\n    }\n    // reset the old one before changing, if still connected\n    if (this.provider && this.provider.connected)\n        this.clearSubscriptions();\n    this.provider = provider || null;\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        if (typeof provider.request === 'function') { // EIP-1193 provider\n            this.provider.on('message', function (payload) {\n                if (payload && payload.type === 'eth_subscription' && payload.data) {\n                    const data = payload.data;\n                    if (data.subscription && _this.subscriptions.has(data.subscription)) {\n                        _this.subscriptions.get(data.subscription).callback(null, data.result);\n                    }\n                }\n            });\n        }\n        else { // legacy provider subscription event\n            this.provider.on('data', function data(result, deprecatedResult) {\n                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n                // if result is a subscription, call callback for that subscription\n                if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n                    _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n                }\n            });\n        }\n        // resubscribe if the provider has reconnected\n        this.provider.on('connect', function connect() {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n        // notify all subscriptions about the error condition\n        this.provider.on('error', function error(error) {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.callback(error);\n            });\n        });\n        // notify all subscriptions about bad close conditions\n        const disconnect = function disconnect(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n                _this.subscriptions.forEach(function (subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n                if (_this.provider && _this.provider.emit) {\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\n                }\n            }\n            if (_this.provider && _this.provider.emit) {\n                _this.provider.emit('end', event);\n            }\n        };\n        this.provider.on('disconnect', disconnect);\n        // TODO add end, timeout??\n    }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function () { };\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    const { method, params } = data;\n    const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n    const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n    if (this.provider.request) {\n        const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n        const requestArgs = { method, params };\n        callbackRequest(requestArgs, callback);\n    }\n    else if (this.provider.sendAsync) {\n        this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else if (this.provider.send) {\n        this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else {\n        throw new Error('Provider does not have a request or send method to use.');\n    }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n        if (!Array.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n        callback(null, results);\n    });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(subscription.id, {\n            callback: callback,\n            subscription: subscription\n        });\n    }\n    else {\n        throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n    }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + '_unsubscribe',\n            params: [id]\n        }, callback);\n        return;\n    }\n    if (typeof callback === 'function') {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    try {\n        var _this = this;\n        // uninstall all subscriptions\n        if (this.subscriptions.size > 0) {\n            this.subscriptions.forEach(function (value, id) {\n                if (!keepIsSyncing || value.name !== 'syncing')\n                    _this.removeSubscription(id);\n            });\n        }\n        //  reset notification callbacks etc.\n        if (this.provider.reset)\n            this.provider.reset();\n        return true;\n    }\n    catch (e) {\n        throw new Error(`Error while clearing subscriptions: ${e}`);\n    }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n    return typeof event === 'boolean' && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n    return function (err, result) {\n        if (result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n        callback(null, result.result);\n    };\n};\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}