{"ast":null,"code":"var BN = require('bn.js');\n\nvar stripHexPrefix = require('strip-hex-prefix');\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\n\n\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n\n    stringArg = stringArg === '' ? '0' : stringArg;\n\n    if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && !arg.pop && !arg.push) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n};","map":{"version":3,"names":["BN","require","stripHexPrefix","module","exports","numberToBN","arg","multiplier","formattedString","String","toLowerCase","trim","isHexPrefixed","substr","stringArg","slice","match","mul","toString","pop","push","dividedToIntegerBy","Error","JSON","stringify"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/number-to-bn/src/index.js"],"sourcesContent":["var BN = require('bn.js');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n    stringArg = stringArg === '' ? '0' : stringArg;\n\n    if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))\n      || stringArg.match(/^[a-fA-F]+$/)\n      || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n}\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAhB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyB;EACxC,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;IACtD,IAAIC,UAAU,GAAG,IAAIP,EAAJ,CAAO,CAAP,CAAjB,CADsD,CAC1B;;IAC5B,IAAIQ,eAAe,GAAGC,MAAM,CAACH,GAAD,CAAN,CAAYI,WAAZ,GAA0BC,IAA1B,EAAtB;IACA,IAAIC,aAAa,GAAGJ,eAAe,CAACK,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,MAAiC,IAAjC,IAAyCL,eAAe,CAACK,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,MAAiC,KAA9F;IACA,IAAIC,SAAS,GAAGZ,cAAc,CAACM,eAAD,CAA9B,CAJsD,CAIL;;IACjD,IAAIM,SAAS,CAACD,MAAV,CAAiB,CAAjB,EAAoB,CAApB,MAA2B,GAA/B,EAAoC;MAClCC,SAAS,GAAGZ,cAAc,CAACY,SAAS,CAACC,KAAV,CAAgB,CAAhB,CAAD,CAA1B;MACAR,UAAU,GAAG,IAAIP,EAAJ,CAAO,CAAC,CAAR,EAAW,EAAX,CAAb;IACD;;IACDc,SAAS,GAAGA,SAAS,KAAK,EAAd,GAAmB,GAAnB,GAAyBA,SAArC;;IAEA,IAAK,CAACA,SAAS,CAACE,KAAV,CAAgB,YAAhB,CAAD,IAAkCF,SAAS,CAACE,KAAV,CAAgB,gBAAhB,CAAnC,IACCF,SAAS,CAACE,KAAV,CAAgB,aAAhB,CADD,IAEEJ,aAAa,KAAK,IAAlB,IAA0BE,SAAS,CAACE,KAAV,CAAgB,gBAAhB,CAFhC,EAEoE;MAClE,OAAO,IAAIhB,EAAJ,CAAOc,SAAP,EAAkB,EAAlB,EAAsBG,GAAtB,CAA0BV,UAA1B,CAAP;IACD;;IAED,IAAI,CAACO,SAAS,CAACE,KAAV,CAAgB,YAAhB,KAAiCF,SAAS,KAAK,EAAhD,KAAuDF,aAAa,KAAK,KAA7E,EAAoF;MAClF,OAAO,IAAIZ,EAAJ,CAAOc,SAAP,EAAkB,EAAlB,EAAsBG,GAAtB,CAA0BV,UAA1B,CAAP;IACD;EACF,CApBD,MAoBO,IAAI,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACY,QAA/B,IAA4C,CAACZ,GAAG,CAACa,GAAL,IAAY,CAACb,GAAG,CAACc,IAAjE,EAAwE;IAC7E,IAAId,GAAG,CAACY,QAAJ,CAAa,EAAb,EAAiBF,KAAjB,CAAuB,YAAvB,MAAyCV,GAAG,CAACW,GAAJ,IAAWX,GAAG,CAACe,kBAAxD,CAAJ,EAAiF;MAC/E,OAAO,IAAIrB,EAAJ,CAAOM,GAAG,CAACY,QAAJ,CAAa,EAAb,CAAP,EAAyB,EAAzB,CAAP;IACD;EACF;;EAED,MAAM,IAAII,KAAJ,CAAU,4CAA4CC,IAAI,CAACC,SAAL,CAAelB,GAAf,CAA5C,GAAkE,oJAA5E,CAAN;AACD,CA5BD"},"metadata":{},"sourceType":"script"}