{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\n\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n\n        case \"error\":\n          bucket = this.errors;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n\n      for (const name in this.errors) {\n        const error = this.errors[name];\n\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n\n      return this.errors[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n\n          break;\n        }\n    }\n\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n\n      if (param.type.match(/^u?int/)) {\n        value = BigNumber.from(value).toHexString();\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return hexZeroPad(hexlify(value), 32);\n    };\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  }\n\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        const value = result[index]; // Make error named values throw on access\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    }); // Make all error indexed values throw on access\n\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}