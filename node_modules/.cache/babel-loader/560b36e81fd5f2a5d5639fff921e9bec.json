{"ast":null,"code":"\"use strict\"; //See: https://github.com/ethereum/wiki/wiki/RLP\n\nimport { arrayify, hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction arrayifyInteger(value) {\n  const result = [];\n\n  while (value) {\n    result.unshift(value & 0xff);\n    value >>= 8;\n  }\n\n  return result;\n}\n\nfunction unarrayifyInteger(data, offset, length) {\n  let result = 0;\n\n  for (let i = 0; i < length; i++) {\n    result = result * 256 + data[offset + i];\n  }\n\n  return result;\n}\n\nfunction _encode(object) {\n  if (Array.isArray(object)) {\n    let payload = [];\n    object.forEach(function (child) {\n      payload = payload.concat(_encode(child));\n    });\n\n    if (payload.length <= 55) {\n      payload.unshift(0xc0 + payload.length);\n      return payload;\n    }\n\n    const length = arrayifyInteger(payload.length);\n    length.unshift(0xf7 + length.length);\n    return length.concat(payload);\n  }\n\n  if (!isBytesLike(object)) {\n    logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n  }\n\n  const data = Array.prototype.slice.call(arrayify(object));\n\n  if (data.length === 1 && data[0] <= 0x7f) {\n    return data;\n  } else if (data.length <= 55) {\n    data.unshift(0x80 + data.length);\n    return data;\n  }\n\n  const length = arrayifyInteger(data.length);\n  length.unshift(0xb7 + length.length);\n  return length.concat(data);\n}\n\nexport function encode(object) {\n  return hexlify(_encode(object));\n}\n\nfunction _decodeChildren(data, offset, childOffset, length) {\n  const result = [];\n\n  while (childOffset < offset + 1 + length) {\n    const decoded = _decode(data, childOffset);\n\n    result.push(decoded.result);\n    childOffset += decoded.consumed;\n\n    if (childOffset > offset + 1 + length) {\n      logger.throwError(\"child data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n  }\n\n  return {\n    consumed: 1 + length,\n    result: result\n  };\n} // returns { consumed: number, result: Object }\n\n\nfunction _decode(data, offset) {\n  if (data.length === 0) {\n    logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n  } // Array with extra length prefix\n\n\n  if (data[offset] >= 0xf8) {\n    const lengthLength = data[offset] - 0xf7;\n\n    if (offset + 1 + lengthLength > data.length) {\n      logger.throwError(\"data short segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n\n    if (offset + 1 + lengthLength + length > data.length) {\n      logger.throwError(\"data long segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n  } else if (data[offset] >= 0xc0) {\n    const length = data[offset] - 0xc0;\n\n    if (offset + 1 + length > data.length) {\n      logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    return _decodeChildren(data, offset, offset + 1, length);\n  } else if (data[offset] >= 0xb8) {\n    const lengthLength = data[offset] - 0xb7;\n\n    if (offset + 1 + lengthLength > data.length) {\n      logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n\n    if (offset + 1 + lengthLength + length > data.length) {\n      logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n    return {\n      consumed: 1 + lengthLength + length,\n      result: result\n    };\n  } else if (data[offset] >= 0x80) {\n    const length = data[offset] - 0x80;\n\n    if (offset + 1 + length > data.length) {\n      logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n\n    const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n    return {\n      consumed: 1 + length,\n      result: result\n    };\n  }\n\n  return {\n    consumed: 1,\n    result: hexlify(data[offset])\n  };\n}\n\nexport function decode(data) {\n  const bytes = arrayify(data);\n\n  const decoded = _decode(bytes, 0);\n\n  if (decoded.consumed !== bytes.length) {\n    logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n  }\n\n  return decoded.result;\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { arrayify, hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    if (!isBytesLike(object)) {\n        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n    }\n    const data = Array.prototype.slice.call(arrayify(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nexport function encode(object) {\n    return hexlify(_encode(object));\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            logger.throwError(\"child data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data short segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data long segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: hexlify(data[offset]) };\n}\nexport function decode(data) {\n    const bytes = arrayify(data);\n    const decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}