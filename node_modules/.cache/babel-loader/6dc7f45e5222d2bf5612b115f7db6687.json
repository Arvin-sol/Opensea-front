{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  let arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    let unique = {};\n    arrayValues = coders.map(coder => {\n      const name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  let staticWriter = new Writer(writer.wordSize);\n  let dynamicWriter = new Writer(writer.wordSize);\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  let values = []; // A reader anchored to this base\n\n  let baseReader = reader.subReader(0);\n  coders.forEach(coder => {\n    let value = null;\n\n    if (coder.dynamic) {\n      let offset = reader.readValue();\n      let offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  const uniqueNames = coders.reduce((accum, coder) => {\n    const name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach((coder, index) => {\n    let name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    const value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    }\n  }\n\n  return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    this.coder = coder;\n    this.length = length;\n  }\n\n  defaultValue() {\n    // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n    const defaultChild = this.coder.defaultValue();\n    const result = [];\n\n    for (let i = 0; i < this.length; i++) {\n      result.push(defaultChild);\n    }\n\n    return result;\n  }\n\n  encode(writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n\n    let count = this.length;\n\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n\n    logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n\n    return pack(writer, coders, value);\n  }\n\n  decode(reader) {\n    let count = this.length;\n\n    if (count === -1) {\n      count = reader.readValue().toNumber(); // Check that there is *roughly* enough data to ensure\n      // stray random data is not being read as a length. Each\n      // slot requires at least 32 bytes for their value (or 32\n      // bytes as a link to the data). This could use a much\n      // tighter bound, but we are erroring on the side of safety.\n\n      if (count * 32 > reader._data.length) {\n        logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n          length: reader._data.length,\n          count: count\n        });\n      }\n    }\n\n    let coders = [];\n\n    for (let i = 0; i < count; i++) {\n      coders.push(new AnonymousCoder(this.coder));\n    }\n\n    return reader.coerce(this.name, unpack(reader, coders));\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"module"}