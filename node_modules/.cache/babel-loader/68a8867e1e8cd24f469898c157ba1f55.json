{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\nvar Transaction =\n/** @class */\nfunction (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = this;\n\n    var _a;\n\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts) || this;\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n\n        var chainIdDoubled = _this.common.chainIdBN().muln(2); // v and chain ID meet EIP-155 conditions\n\n\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n\n\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n    }\n\n    return values;\n  };\n\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.rlphash)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: _super.prototype.getDataFee.call(this),\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return _super.prototype.getDataFee.call(this);\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  Transaction.prototype.hash = function () {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, ethereumjs_util_1.rlphash)(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var message = this._getMessageToSign();\n\n    return (0, ethereumjs_util_1.rlphash)(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n\n    var opts = __assign(__assign({}, this.txOptions), {\n      common: this.common\n    });\n\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v, common) {\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n        throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n      }\n    }\n\n    var chainIdBN; // No unsigned tx and EIP-155 activated and chain ID included\n\n    if (v !== undefined && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n\n    errorStr += \" gasPrice=\".concat(this.gasPrice);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = Transaction;","map":{"version":3,"sources":["../src/legacyTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */ (function (_super) {\n    __extends(Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;\n        _this.common = _this._validateTxV(_this.v, opts.common);\n        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.common.gteHardfork('spuriousDragon')) {\n            if (!_this.isSigned()) {\n                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                var v = _this.v;\n                var chainIdDoubled = _this.common.chainIdBN().muln(2);\n                // v and chain ID meet EIP-155 conditions\n                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link Transaction.fromSerializedTx})\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link Transaction.fromSerializedTx} constructor\n     */\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        return new Transaction({\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            v: v,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    Transaction.prototype._getMessageToSign = function () {\n        var values = [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n        }\n        return values;\n    };\n    Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var message = this._getMessageToSign();\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.rlphash)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: _super.prototype.getDataFee.call(this),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return _super.prototype.getDataFee.call(this);\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    Transaction.prototype.hash = function () {\n        // In contrast to the tx type transaction implementations the `hash()` function\n        // for the legacy tx does not throw if the tx is not signed.\n        // This has been considered for inclusion but lead to unexpected backwards\n        // compatibility problems (no concrete reference found, needs validation).\n        //\n        // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n        // September, 2021 as well as work done before.\n        //\n        // This should be updated along the next major version release by adding:\n        //\n        //if (!this.isSigned()) {\n        //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n        //  throw new Error(msg)\n        //}\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.rlphash)(this.raw());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var message = this._getMessageToSign();\n        return (0, ethereumjs_util_1.rlphash)(message);\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    Transaction.prototype._processSignature = function (v, r, s) {\n        var vBN = new ethereumjs_util_1.BN(v);\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n        }\n        var opts = __assign(__assign({}, this.txOptions), { common: this.common });\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: vBN,\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v, common) {\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n                throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n            }\n        }\n        var chainIdBN;\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            !v.eqn(27) &&\n            !v.eqn(28)) {\n            if (common) {\n                var chainIdDoubled = common.chainIdBN().muln(2);\n                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n                if (!isValidEIP155V) {\n                    throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n                }\n            }\n            else {\n                // Derive the original chain ID\n                var numSub = void 0;\n                if (v.subn(35).isEven()) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBN = v.subn(numSub).divn(2);\n            }\n        }\n        return this._getCommon(common, chainIdBN);\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = this.v;\n        var chainIdDoubled = this.common.chainIdBN().muln(2);\n        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    Transaction.prototype.errorStr = function () {\n        var errorStr = this._getSharedErrorPostfix();\n        errorStr += \" gasPrice=\".concat(this.gasPrice);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map"]},"metadata":{},"sourceType":"script"}