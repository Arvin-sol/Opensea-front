{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nmodule.exports = function base64(alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1;\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;\n  return {\n    encode(input) {\n      let output = '';\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64');\n      } else {\n        output = input.toString('base64');\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_');\n      }\n\n      const pad = output.indexOf('=');\n\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad);\n      }\n\n      return output;\n    },\n\n    decode(input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character');\n        }\n      }\n\n      return Buffer.from(input, 'base64');\n    }\n\n  };\n};","map":{"version":3,"names":["Buffer","require","module","exports","base64","alphabet","padding","indexOf","url","encode","input","output","from","toString","replace","pad","substring","decode","char","Error"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/node_modules/multibase/src/base64.js"],"sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAiBC,QAAjB,EAA2B;EAC1C;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzC;EACA,MAAMC,GAAG,GAAGH,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzB,IAA8BF,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAnE;EAEA,OAAO;IACLE,MAAM,CAAEC,KAAF,EAAS;MACb,IAAIC,MAAM,GAAG,EAAb;;MAEA,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;QAC7BC,MAAM,GAAGX,MAAM,CAACY,IAAP,CAAYF,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAAT;MACD,CAFD,MAEO;QACLF,MAAM,GAAGD,KAAK,CAACG,QAAN,CAAe,QAAf,CAAT;MACD;;MAED,IAAIL,GAAJ,EAAS;QACPG,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAe,KAAf,EAAsB,GAAtB,EAA2BA,OAA3B,CAAmC,KAAnC,EAA0C,GAA1C,CAAT;MACD;;MAED,MAAMC,GAAG,GAAGJ,MAAM,CAACJ,OAAP,CAAe,GAAf,CAAZ;;MACA,IAAIQ,GAAG,GAAG,CAAN,IAAW,CAACT,OAAhB,EAAyB;QACvBK,MAAM,GAAGA,MAAM,CAACK,SAAP,CAAiB,CAAjB,EAAoBD,GAApB,CAAT;MACD;;MAED,OAAOJ,MAAP;IACD,CApBI;;IAqBLM,MAAM,CAAEP,KAAF,EAAS;MACb,KAAK,MAAMQ,IAAX,IAAmBR,KAAnB,EAA0B;QACxB,IAAIL,QAAQ,CAACE,OAAT,CAAiBW,IAAjB,IAAyB,CAA7B,EAAgC;UAC9B,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACD;MACF;;MAED,OAAOnB,MAAM,CAACY,IAAP,CAAYF,KAAZ,EAAmB,QAAnB,CAAP;IACD;;EA7BI,CAAP;AA+BD,CAxCD"},"metadata":{},"sourceType":"script"}