{"ast":null,"code":"'use strict';\n\nvar BN = require('bn.js');\n\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1); // complete ethereum unit map\n\nvar unitMap = {\n  'noether': '0',\n  // eslint-disable-line\n  'wei': '1',\n  // eslint-disable-line\n  'kwei': '1000',\n  // eslint-disable-line\n  'Kwei': '1000',\n  // eslint-disable-line\n  'babbage': '1000',\n  // eslint-disable-line\n  'femtoether': '1000',\n  // eslint-disable-line\n  'mwei': '1000000',\n  // eslint-disable-line\n  'Mwei': '1000000',\n  // eslint-disable-line\n  'lovelace': '1000000',\n  // eslint-disable-line\n  'picoether': '1000000',\n  // eslint-disable-line\n  'gwei': '1000000000',\n  // eslint-disable-line\n  'Gwei': '1000000000',\n  // eslint-disable-line\n  'shannon': '1000000000',\n  // eslint-disable-line\n  'nanoether': '1000000000',\n  // eslint-disable-line\n  'nano': '1000000000',\n  // eslint-disable-line\n  'szabo': '1000000000000',\n  // eslint-disable-line\n  'microether': '1000000000000',\n  // eslint-disable-line\n  'micro': '1000000000000',\n  // eslint-disable-line\n  'finney': '1000000000000000',\n  // eslint-disable-line\n  'milliether': '1000000000000000',\n  // eslint-disable-line\n  'milli': '1000000000000000',\n  // eslint-disable-line\n  'ether': '1000000000000000000',\n  // eslint-disable-line\n  'kether': '1000000000000000000000',\n  // eslint-disable-line\n  'grand': '1000000000000000000000',\n  // eslint-disable-line\n  'mether': '1000000000000000000000000',\n  // eslint-disable-line\n  'gether': '1000000000000000000000000000',\n  // eslint-disable-line\n  'tether': '1000000000000000000000000000000'\n};\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\n\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\n\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n\n  var negative = wei.lt(zero); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1; // Is it negative?\n\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  } // Split it into a whole and fractional part\n\n\n  var comps = ether.split('.'); // eslint-disable-line\n\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n\n  if (!fraction) {\n    fraction = '0';\n  }\n\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new BN(wei.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};","map":{"version":3,"names":["BN","require","numberToBN","zero","negative1","unitMap","getValueOfUnit","unitInput","unit","toLowerCase","unitValue","Error","JSON","stringify","numberToString","arg","match","String","toString","toTwos","dividedToIntegerBy","toPrecision","fromWei","weiInput","optionsInput","wei","negative","lt","base","baseLength","length","options","mul","fraction","mod","pad","whole","div","commify","replace","value","toWei","etherInput","ether","substring","comps","split","add","module","exports"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/ethjs-unit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n\n// complete ethereum unit map\nvar unitMap = {\n  'noether': '0', // eslint-disable-line\n  'wei': '1', // eslint-disable-line\n  'kwei': '1000', // eslint-disable-line\n  'Kwei': '1000', // eslint-disable-line\n  'babbage': '1000', // eslint-disable-line\n  'femtoether': '1000', // eslint-disable-line\n  'mwei': '1000000', // eslint-disable-line\n  'Mwei': '1000000', // eslint-disable-line\n  'lovelace': '1000000', // eslint-disable-line\n  'picoether': '1000000', // eslint-disable-line\n  'gwei': '1000000000', // eslint-disable-line\n  'Gwei': '1000000000', // eslint-disable-line\n  'shannon': '1000000000', // eslint-disable-line\n  'nanoether': '1000000000', // eslint-disable-line\n  'nano': '1000000000', // eslint-disable-line\n  'szabo': '1000000000000', // eslint-disable-line\n  'microether': '1000000000000', // eslint-disable-line\n  'micro': '1000000000000', // eslint-disable-line\n  'finney': '1000000000000000', // eslint-disable-line\n  'milliether': '1000000000000000', // eslint-disable-line\n  'milli': '1000000000000000', // eslint-disable-line\n  'ether': '1000000000000000000', // eslint-disable-line\n  'kether': '1000000000000000000000', // eslint-disable-line\n  'grand': '1000000000000000000000', // eslint-disable-line\n  'mether': '1000000000000000000000000', // eslint-disable-line\n  'gether': '1000000000000000000000000000', // eslint-disable-line\n  'tether': '1000000000000000000000000000000' };\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\n\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n  var negative = wei.lt(zero); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n\n  // Is it negative?\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  }\n\n  // Split it into a whole and fractional part\n  var comps = ether.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new BN(wei.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}