{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;\n\nvar events_1 = require(\"events\");\n\nvar crc_32_1 = require(\"crc-32\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar chains_1 = require(\"./chains\");\n\nvar hardforks_1 = require(\"./hardforks\");\n\nvar eips_1 = require(\"./eips\");\n\nvar CustomChain;\n\n(function (CustomChain) {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n\n  CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n\n  CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n\n  CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n\n  CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n\n  CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\n\nvar Chain;\n\n(function (Chain) {\n  Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n  Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n  Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n  Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n  Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\n\nvar Hardfork;\n\n(function (Hardfork) {\n  Hardfork[\"Chainstart\"] = \"chainstart\";\n  Hardfork[\"Homestead\"] = \"homestead\";\n  Hardfork[\"Dao\"] = \"dao\";\n  Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n  Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n  Hardfork[\"Byzantium\"] = \"byzantium\";\n  Hardfork[\"Constantinople\"] = \"constantinople\";\n  Hardfork[\"Petersburg\"] = \"petersburg\";\n  Hardfork[\"Istanbul\"] = \"istanbul\";\n  Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n  Hardfork[\"Berlin\"] = \"berlin\";\n  Hardfork[\"London\"] = \"london\";\n  Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n  Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n  Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n  Hardfork[\"Merge\"] = \"merge\";\n  Hardfork[\"Shanghai\"] = \"shanghai\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\n\nvar ConsensusType;\n\n(function (ConsensusType) {\n  ConsensusType[\"ProofOfStake\"] = \"pos\";\n  ConsensusType[\"ProofOfWork\"] = \"pow\";\n  ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\n\nvar ConsensusAlgorithm;\n\n(function (ConsensusAlgorithm) {\n  ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n  ConsensusAlgorithm[\"Clique\"] = \"clique\";\n  ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\n\n\nvar Common =\n/** @class */\nfunction (_super) {\n  __extends(Common, _super);\n  /**\n   *\n   * @constructor\n   */\n\n\n  function Common(opts) {\n    var e_1, _a;\n\n    var _this = this;\n\n    var _b, _c;\n\n    _this = _super.call(this) || this;\n    _this._supportedHardforks = [];\n    _this._eips = [];\n    _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];\n    _this._chainParams = _this.setChain(opts.chain);\n    _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;\n\n    try {\n      for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {\n        var hf = _e.value;\n\n        if (!hf.forkHash) {\n          hf.forkHash = _this._calcForkHash(hf.name);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    _this._hardfork = _this.DEFAULT_HARDFORK;\n\n    if (opts.supportedHardforks) {\n      _this._supportedHardforks = opts.supportedHardforks;\n    }\n\n    if (opts.hardfork) {\n      _this.setHardfork(opts.hardfork);\n    }\n\n    if (opts.eips) {\n      _this.setEIPs(opts.eips);\n    }\n\n    return _this;\n  }\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n\n\n  Common.custom = function (chainParamsOrName, opts) {\n    var _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n\n    var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n\n    standardChainParams['name'] = 'custom-chain';\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common(__assign({\n        chain: __assign(__assign({}, standardChainParams), chainParamsOrName)\n      }, opts));\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom({\n          name: CustomChain.PolygonMainnet,\n          chainId: 137,\n          networkId: 137\n        }, opts);\n      }\n\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom({\n          name: CustomChain.PolygonMumbai,\n          chainId: 80001,\n          networkId: 80001\n        }, opts);\n      }\n\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom({\n          name: CustomChain.ArbitrumRinkebyTestnet,\n          chainId: 421611,\n          networkId: 421611\n        }, opts);\n      }\n\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom({\n          name: CustomChain.xDaiChain,\n          chainId: 100,\n          networkId: 100\n        }, opts);\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom({\n          name: CustomChain.OptimisticKovan,\n          chainId: 69,\n          networkId: 69\n        }, __assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom({\n          name: CustomChain.OptimisticEthereum,\n          chainId: 10,\n          networkId: 10\n        }, __assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n\n      throw new Error(\"Custom chain \".concat(chainParamsOrName, \" not supported\"));\n    }\n  };\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n\n\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n\n    return new Common({\n      chain: __assign(__assign({}, standardChainParams), customChainParams),\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks\n    });\n  };\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n\n\n  Common.isSupportedChainId = function (chainId) {\n    var initializedChains = (0, chains_1._getInitializedChains)();\n    return Boolean(initializedChains['names'][chainId.toString()]);\n  };\n\n  Common._getChainParams = function (chain, customChains) {\n    var initializedChains = (0, chains_1._getInitializedChains)(customChains);\n\n    if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n      chain = chain.toString();\n\n      if (initializedChains['names'][chain]) {\n        var name_1 = initializedChains['names'][chain];\n        return initializedChains[name_1];\n      }\n\n      throw new Error(\"Chain with ID \".concat(chain, \" not supported\"));\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain];\n    }\n\n    throw new Error(\"Chain with name \".concat(chain, \" not supported\"));\n  };\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n\n\n  Common.prototype.setChain = function (chain) {\n    var e_2, _a;\n\n    if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      var plainCustomChains = void 0;\n\n      if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {\n        plainCustomChains = this._customChains.map(function (e) {\n          return e[0];\n        });\n      } else {\n        plainCustomChains = this._customChains;\n      }\n\n      this._chainParams = Common._getChainParams(chain, plainCustomChains);\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n      }\n\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\n      try {\n        for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n          var param = required_1_1.value;\n\n          if (chain[param] === undefined) {\n            throw new Error(\"Missing required chain parameter: \".concat(param));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n\n    return this._chainParams;\n  };\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n\n\n  Common.prototype.setHardfork = function (hardfork) {\n    var e_3, _a;\n\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n    }\n\n    var existing = false;\n\n    try {\n      for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n        var hfChanges = HARDFORK_CHANGES_1_1.value;\n\n        if (hfChanges[0] === hardfork) {\n          if (this._hardfork !== hardfork) {\n            this._hardfork = hardfork;\n            this.emit('hardforkChanged', hardfork);\n          }\n\n          existing = true;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!existing) {\n      throw new Error(\"Hardfork with name \".concat(hardfork, \" not supported\"));\n    }\n  };\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n\n\n  Common.prototype.getHardforkByBlockNumber = function (blockNumber, td) {\n    var e_4, _a;\n\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    td = (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN);\n    var hardfork = Hardfork.Chainstart;\n    var minTdHF;\n    var maxTdHF;\n    var previousHF;\n\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value; // Skip comparison for not applied HFs\n\n        if (hf.block === null) {\n          if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n            if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n              return hf.name;\n            }\n          }\n\n          continue;\n        }\n\n        if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n          hardfork = hf.name;\n        }\n\n        if (td && hf.td) {\n          if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n            minTdHF = hf.name;\n          } else {\n            maxTdHF = previousHF;\n          }\n        }\n\n        previousHF = hf.name;\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    if (td) {\n      var msgAdd = \"block number: \".concat(blockNumber, \" (-> \").concat(hardfork, \"), \");\n\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          var msg = 'HF determined by block number is lower than the minimum total difficulty HF';\n          msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(minTdHF, \")\");\n          throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n        }\n      }\n\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          var msg = 'Maximum HF determined by total difficulty is lower than the block number HF';\n          msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(maxTdHF, \")\");\n          throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n        }\n      }\n    }\n\n    return hardfork;\n  };\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n\n\n  Common.prototype.setHardforkByBlockNumber = function (blockNumber, td) {\n    var hardfork = this.getHardforkByBlockNumber(blockNumber, td);\n    this.setHardfork(hardfork);\n    return hardfork;\n  };\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n\n\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    if (onlySupported === void 0) {\n      onlySupported = true;\n    }\n\n    if (!hardfork) {\n      hardfork = this._hardfork;\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n    }\n\n    return hardfork;\n  };\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n\n\n  Common.prototype._getHardfork = function (hardfork) {\n    var e_5, _a;\n\n    var hfs = this.hardforks();\n\n    try {\n      for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n        var hf = hfs_1_1.value;\n        if (hf['name'] === hardfork) return hf;\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    throw new Error(\"Hardfork \".concat(hardfork, \" not defined for chain \").concat(this.chainName()));\n  };\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n\n\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    var e_6, _a;\n\n    if (this._supportedHardforks.length > 0) {\n      try {\n        for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var supportedHf = _c.value;\n          if (hardfork === supportedHf) return true;\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    } else {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n\n\n  Common.prototype.setEIPs = function (eips) {\n    var e_7, _a;\n\n    var _this = this;\n\n    if (eips === void 0) {\n      eips = [];\n    }\n\n    var _loop_1 = function (eip) {\n      if (!(eip in eips_1.EIPs)) {\n        throw new Error(\"\".concat(eip, \" not supported\"));\n      }\n\n      var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n\n      if (!minHF) {\n        throw new Error(\"\".concat(eip, \" cannot be activated on hardfork \").concat(this_1.hardfork(), \", minimumHardfork: \").concat(minHF));\n      }\n\n      if (eips_1.EIPs[eip].requiredEIPs) {\n        ;\n        eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n          if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n            throw new Error(\"\".concat(eip, \" requires EIP \").concat(elem, \", but is not included in the EIP list\"));\n          }\n        });\n      }\n    };\n\n    var this_1 = this;\n\n    try {\n      for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n        var eip = eips_2_1.value;\n\n        _loop_1(eip);\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n\n    this._eips = eips;\n  };\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.param = function (topic, name) {\n    var e_8, _a; // TODO: consider the case that different active EIPs\n    // can change the same parameter\n\n\n    var value = null;\n\n    try {\n      for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var eip = _c.value;\n        value = this.paramByEIP(topic, name, eip);\n\n        if (value !== null) {\n          return value;\n        }\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n\n    return this.paramByHardfork(topic, name, this._hardfork);\n  };\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n    var e_9, _a, e_10, _b;\n\n    hardfork = this._chooseHardfork(hardfork);\n    var value = null;\n\n    try {\n      for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n        var hfChanges = HARDFORK_CHANGES_2_1.value; // EIP-referencing HF file (e.g. berlin.json)\n\n        if ('eips' in hfChanges[1]) {\n          var hfEIPs = hfChanges[1]['eips'];\n\n          try {\n            for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n              var eip = hfEIPs_1_1.value;\n              var valueEIP = this.paramByEIP(topic, name, eip);\n              value = valueEIP !== null ? valueEIP : value;\n            }\n          } catch (e_10_1) {\n            e_10 = {\n              error: e_10_1\n            };\n          } finally {\n            try {\n              if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n            } finally {\n              if (e_10) throw e_10.error;\n            }\n          } // Paramater-inlining HF file (e.g. istanbul.json)\n\n        } else {\n          if (!hfChanges[1][topic]) {\n            throw new Error(\"Topic \".concat(topic, \" not defined\"));\n          }\n\n          if (hfChanges[1][topic][name] !== undefined) {\n            value = hfChanges[1][topic][name].v;\n          }\n        }\n\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.paramByEIP = function (topic, name, eip) {\n    if (!(eip in eips_1.EIPs)) {\n      throw new Error(\"\".concat(eip, \" not supported\"));\n    }\n\n    var eipParams = eips_1.EIPs[eip];\n\n    if (!(topic in eipParams)) {\n      throw new Error(\"Topic \".concat(topic, \" not defined\"));\n    }\n\n    if (eipParams[topic][name] === undefined) {\n      return null;\n    }\n\n    var value = eipParams[topic][name].v;\n    return value;\n  };\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n\n\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.paramByHardfork(topic, name, hardfork);\n  };\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n\n\n  Common.prototype.isActivatedEIP = function (eip) {\n    var e_11, _a;\n\n    if (this.eips().includes(eip)) {\n      return true;\n    }\n\n    try {\n      for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n        var hfChanges = HARDFORK_CHANGES_3_1.value;\n        var hf = hfChanges[1];\n\n        if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n          if (hf['eips'].includes(eip)) {\n            return true;\n          }\n        }\n      }\n    } catch (e_11_1) {\n      e_11 = {\n        error: e_11_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n      } finally {\n        if (e_11) throw e_11.error;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    var _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlockBN(hardfork);\n\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n\n\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    var e_12, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n\n    var posHf1 = -1,\n        posHf2 = -1;\n    var index = 0;\n\n    try {\n      for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n        var hf = hardforks_2_1.value;\n        if (hf['name'] === hardfork1) posHf1 = index;\n        if (hf['name'] === hardfork2) posHf2 = index;\n        index += 1;\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n\n    return posHf1 >= posHf2 && posHf2 !== -1;\n  };\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n\n\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n\n\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    var e_13, _a;\n\n    var _b;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n\n    try {\n      for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var hf = _d.value;\n        if (hf['name'] === hardfork && hf['block'] !== null) return true;\n      }\n    } catch (e_13_1) {\n      e_13 = {\n        error: e_13_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_13) throw e_13.error;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n\n\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    var e_14, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n\n    try {\n      for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n        var hf = hfs_2_1.value;\n        if (hf['block'] === null) continue;\n        if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n        if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n        activeHardforks.push(hf);\n      }\n    } catch (e_14_1) {\n      e_14 = {\n        error: e_14_1\n      };\n    } finally {\n      try {\n        if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n      } finally {\n        if (e_14) throw e_14.error;\n      }\n    }\n\n    return activeHardforks;\n  };\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n\n\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n\n\n  Common.prototype.hardforkBlock = function (hardfork) {\n    var block = this.hardforkBlockBN(hardfork);\n    return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n\n\n  Common.prototype.hardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n\n    var block = this._getHardfork(hardfork)['block'];\n\n    if (block === undefined || block === null) {\n      return null;\n    }\n\n    return new ethereumjs_util_1.BN(block);\n  };\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n\n\n  Common.prototype.hardforkTD = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n\n    var td = this._getHardfork(hardfork)['td'];\n\n    if (td === undefined || td === null) {\n      return null;\n    }\n\n    return new ethereumjs_util_1.BN(td);\n  };\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n\n\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    var block = this.hardforkBlockBN(hardfork);\n    return block ? block.eq(blockNumber) : false;\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n\n\n  Common.prototype.nextHardforkBlock = function (hardfork) {\n    var block = this.nextHardforkBlockBN(hardfork);\n    return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n\n\n  Common.prototype.nextHardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var hfBlock = this.hardforkBlockBN(hardfork);\n\n    if (hfBlock === null) {\n      return null;\n    } // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n\n\n    var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n      var block = new ethereumjs_util_1.BN(hf.block);\n      return block.gt(hfBlock) && acc === null ? block : acc;\n    }, null);\n    return nextHfBlock;\n  };\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n\n\n  Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n  };\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n\n\n  Common.prototype._calcForkHash = function (hardfork) {\n    var e_15, _a;\n\n    var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n    var hfBuffer = Buffer.alloc(0);\n    var prevBlock = 0;\n\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value;\n        var block = hf.block; // Skip for chainstart (0), not applied HFs (null) and\n        // when already applied on same block number HFs\n\n        if (block !== 0 && block !== null && block !== prevBlock) {\n          var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n          hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n        }\n\n        if (hf.name === hardfork) break;\n\n        if (block !== null) {\n          prevBlock = block;\n        }\n      }\n    } catch (e_15_1) {\n      e_15 = {\n        error: e_15_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_15) throw e_15.error;\n      }\n    }\n\n    var inputBuffer = Buffer.concat([genesis, hfBuffer]); // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n\n    var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n    return \"0x\".concat(forkhash);\n  };\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n\n\n  Common.prototype.forkHash = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n\n    var data = this._getHardfork(hardfork);\n\n    if (data['block'] === null && data['td'] === undefined) {\n      var msg = 'No fork hash calculation possible for future hardfork';\n      throw new Error(msg);\n    }\n\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash'];\n    }\n\n    return this._calcForkHash(hardfork);\n  };\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n\n\n  Common.prototype.hardforkForForkHash = function (forkHash) {\n    var resArray = this.hardforks().filter(function (hf) {\n      return hf.forkHash === forkHash;\n    });\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n  };\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n\n\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\n   * Returns the Genesis state of the current chain,\n   * all values are provided as hex-prefixed strings.\n   */\n\n\n  Common.prototype.genesisState = function () {\n    var e_16, _a; // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n\n\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json');\n\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json');\n\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json');\n\n      case 'kovan':\n        return require('./genesisStates/kovan.json');\n\n      case 'goerli':\n        return require('./genesisStates/goerli.json');\n\n      case 'sepolia':\n        return require('./genesisStates/sepolia.json');\n    } // Custom chains with genesis state provided\n\n\n    if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {\n      try {\n        for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var chainArrayWithGenesis = _c.value;\n\n          if (chainArrayWithGenesis[0].name === this.chainName()) {\n            return chainArrayWithGenesis[1];\n          }\n        }\n      } catch (e_16_1) {\n        e_16 = {\n          error: e_16_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_16) throw e_16.error;\n        }\n      }\n    }\n\n    return {};\n  };\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n\n\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n\n\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n\n\n  Common.prototype.dnsNetworks = function () {\n    return this._chainParams['dnsNetworks'];\n  };\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n\n\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n\n\n  Common.prototype.chainId = function () {\n    return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n\n\n  Common.prototype.chainIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n  };\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n\n\n  Common.prototype.chainName = function () {\n    return this._chainParams['name'];\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n\n\n  Common.prototype.networkId = function () {\n    return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n\n\n  Common.prototype.networkIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n  };\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n\n\n  Common.prototype.eips = function () {\n    return this._eips;\n  };\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n\n\n  Common.prototype.consensusType = function () {\n    var e_17, _a;\n\n    var hardfork = this.hardfork();\n    var value;\n\n    try {\n      for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {\n        var hfChanges = HARDFORK_CHANGES_4_1.value;\n\n        if ('consensus' in hfChanges[1]) {\n          value = hfChanges[1]['consensus']['type'];\n        }\n\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_17_1) {\n      e_17 = {\n        error: e_17_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);\n      } finally {\n        if (e_17) throw e_17.error;\n      }\n    }\n\n    if (value) {\n      return value;\n    }\n\n    return this._chainParams['consensus']['type'];\n  };\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n\n\n  Common.prototype.consensusAlgorithm = function () {\n    var e_18, _a;\n\n    var hardfork = this.hardfork();\n    var value;\n\n    try {\n      for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {\n        var hfChanges = HARDFORK_CHANGES_5_1.value;\n\n        if ('consensus' in hfChanges[1]) {\n          value = hfChanges[1]['consensus']['algorithm'];\n        }\n\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_18_1) {\n      e_18 = {\n        error: e_18_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);\n      } finally {\n        if (e_18) throw e_18.error;\n      }\n    }\n\n    if (value) {\n      return value;\n    }\n\n    return this._chainParams['consensus']['algorithm'];\n  };\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n\n\n  Common.prototype.consensusConfig = function () {\n    var e_19, _a;\n\n    var hardfork = this.hardfork();\n    var value;\n\n    try {\n      for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {\n        var hfChanges = HARDFORK_CHANGES_6_1.value;\n\n        if ('consensus' in hfChanges[1]) {\n          // The config parameter is named after the respective consensus algorithm\n          value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n        }\n\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_19_1) {\n      e_19 = {\n        error: e_19_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);\n      } finally {\n        if (e_19) throw e_19.error;\n      }\n    }\n\n    if (value) {\n      return value;\n    }\n\n    var consensusAlgorithm = this.consensusAlgorithm();\n    return this._chainParams['consensus'][consensusAlgorithm];\n  };\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n\n\n  Common.prototype.copy = function () {\n    var copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    copy.removeAllListeners();\n    return copy;\n  };\n\n  return Common;\n}(events_1.EventEmitter);\n\nexports.default = Common;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;\nvar events_1 = require(\"events\");\nvar crc_32_1 = require(\"crc-32\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\nvar eips_1 = require(\"./eips\");\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */\n    CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n    Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Merge\"] = \"merge\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nvar Common = /** @class */ (function (_super) {\n    __extends(Common, _super);\n    /**\n     *\n     * @constructor\n     */\n    function Common(opts) {\n        var e_1, _a;\n        var _this = this;\n        var _b, _c;\n        _this = _super.call(this) || this;\n        _this._supportedHardforks = [];\n        _this._eips = [];\n        _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];\n        _this._chainParams = _this.setChain(opts.chain);\n        _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;\n        try {\n            for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var hf = _e.value;\n                if (!hf.forkHash) {\n                    hf.forkHash = _this._calcForkHash(hf.name);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        _this._hardfork = _this.DEFAULT_HARDFORK;\n        if (opts.supportedHardforks) {\n            _this._supportedHardforks = opts.supportedHardforks;\n        }\n        if (opts.hardfork) {\n            _this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            _this.setEIPs(opts.eips);\n        }\n        return _this;\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    Common.custom = function (chainParamsOrName, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n        var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common(__assign({ chain: __assign(__assign({}, standardChainParams), chainParamsOrName) }, opts));\n        }\n        else {\n            if (chainParamsOrName === CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n                return Common.custom({\n                    name: CustomChain.ArbitrumRinkebyTestnet,\n                    chainId: 421611,\n                    networkId: 421611,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, __assign({ hardfork: Hardfork.Berlin }, opts));\n            }\n            if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, __assign({ hardfork: Hardfork.Berlin }, opts));\n            }\n            throw new Error(\"Custom chain \".concat(chainParamsOrName, \" not supported\"));\n        }\n    };\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n     * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n     *\n     * @deprecated Use {@link Common.custom} instead\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common({\n            chain: __assign(__assign({}, standardChainParams), customChainParams),\n            hardfork: hardfork,\n            supportedHardforks: supportedHardforks,\n        });\n    };\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId BN id (`1`) of a standard chain\n     * @returns boolean\n     */\n    Common.isSupportedChainId = function (chainId) {\n        var initializedChains = (0, chains_1._getInitializedChains)();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    };\n    Common._getChainParams = function (chain, customChains) {\n        var initializedChains = (0, chains_1._getInitializedChains)(customChains);\n        if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                var name_1 = initializedChains['names'][chain];\n                return initializedChains[name_1];\n            }\n            throw new Error(\"Chain with ID \".concat(chain, \" not supported\"));\n        }\n        if (initializedChains[chain]) {\n            return initializedChains[chain];\n        }\n        throw new Error(\"Chain with name \".concat(chain, \" not supported\"));\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        var e_2, _a;\n        if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n            // Filter out genesis states if passed in to customChains\n            var plainCustomChains = void 0;\n            if (this._customChains &&\n                this._customChains.length > 0 &&\n                Array.isArray(this._customChains[0])) {\n                plainCustomChains = this._customChains.map(function (e) { return e[0]; });\n            }\n            else {\n                plainCustomChains = this._customChains;\n            }\n            this._chainParams = Common._getChainParams(chain, plainCustomChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n            }\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            try {\n                for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n                    var param = required_1_1.value;\n                    if (chain[param] === undefined) {\n                        throw new Error(\"Missing required chain parameter: \".concat(param));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        var e_3, _a;\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n        }\n        var existing = false;\n        try {\n            for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n                var hfChanges = HARDFORK_CHANGES_1_1.value;\n                if (hfChanges[0] === hardfork) {\n                    if (this._hardfork !== hardfork) {\n                        this._hardfork = hardfork;\n                        this.emit('hardforkChanged', hardfork);\n                    }\n                    existing = true;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        if (!existing) {\n            throw new Error(\"Hardfork with name \".concat(hardfork, \" not supported\"));\n        }\n    };\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @returns The name of the HF\n     */\n    Common.prototype.getHardforkByBlockNumber = function (blockNumber, td) {\n        var e_4, _a;\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        td = (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN);\n        var hardfork = Hardfork.Chainstart;\n        var minTdHF;\n        var maxTdHF;\n        var previousHF;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                // Skip comparison for not applied HFs\n                if (hf.block === null) {\n                    if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n                        if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n                            return hf.name;\n                        }\n                    }\n                    continue;\n                }\n                if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n                    hardfork = hf.name;\n                }\n                if (td && hf.td) {\n                    if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n                        minTdHF = hf.name;\n                    }\n                    else {\n                        maxTdHF = previousHF;\n                    }\n                }\n                previousHF = hf.name;\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        if (td) {\n            var msgAdd = \"block number: \".concat(blockNumber, \" (-> \").concat(hardfork, \"), \");\n            if (minTdHF) {\n                if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n                    var msg = 'HF determined by block number is lower than the minimum total difficulty HF';\n                    msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(minTdHF, \")\");\n                    throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n                }\n            }\n            if (maxTdHF) {\n                if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n                    var msg = 'Maximum HF determined by total difficulty is lower than the block number HF';\n                    msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(maxTdHF, \")\");\n                    throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n                }\n            }\n        }\n        return hardfork;\n    };\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @returns The name of the HF set\n     */\n    Common.prototype.setHardforkByBlockNumber = function (blockNumber, td) {\n        var hardfork = this.getHardforkByBlockNumber(blockNumber, td);\n        this.setHardfork(hardfork);\n        return hardfork;\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        if (onlySupported === void 0) { onlySupported = true; }\n        if (!hardfork) {\n            hardfork = this._hardfork;\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var e_5, _a;\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n                var hf = hfs_1_1.value;\n                if (hf['name'] === hardfork)\n                    return hf;\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        throw new Error(\"Hardfork \".concat(hardfork, \" not defined for chain \").concat(this.chainName()));\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        var e_6, _a;\n        if (this._supportedHardforks.length > 0) {\n            try {\n                for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var supportedHf = _c.value;\n                    if (hardfork === supportedHf)\n                        return true;\n                }\n            }\n            catch (e_6_1) { e_6 = { error: e_6_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_6) throw e_6.error; }\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    Common.prototype.setEIPs = function (eips) {\n        var e_7, _a;\n        var _this = this;\n        if (eips === void 0) { eips = []; }\n        var _loop_1 = function (eip) {\n            if (!(eip in eips_1.EIPs)) {\n                throw new Error(\"\".concat(eip, \" not supported\"));\n            }\n            var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(\"\".concat(eip, \" cannot be activated on hardfork \").concat(this_1.hardfork(), \", minimumHardfork: \").concat(minHF));\n            }\n            if (eips_1.EIPs[eip].requiredEIPs) {\n                ;\n                eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n                    if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n                        throw new Error(\"\".concat(eip, \" requires EIP \").concat(elem, \", but is not included in the EIP list\"));\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        try {\n            for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n                var eip = eips_2_1.value;\n                _loop_1(eip);\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n        this._eips = eips;\n    };\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precendence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.param = function (topic, name) {\n        var e_8, _a;\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        var value = null;\n        try {\n            for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var eip = _c.value;\n                value = this.paramByEIP(topic, name, eip);\n                if (value !== null) {\n                    return value;\n                }\n            }\n        }\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_8) throw e_8.error; }\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n        var e_9, _a, e_10, _b;\n        hardfork = this._chooseHardfork(hardfork);\n        var value = null;\n        try {\n            for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n                var hfChanges = HARDFORK_CHANGES_2_1.value;\n                // EIP-referencing HF file (e.g. berlin.json)\n                if ('eips' in hfChanges[1]) {\n                    var hfEIPs = hfChanges[1]['eips'];\n                    try {\n                        for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n                            var eip = hfEIPs_1_1.value;\n                            var valueEIP = this.paramByEIP(topic, name, eip);\n                            value = valueEIP !== null ? valueEIP : value;\n                        }\n                    }\n                    catch (e_10_1) { e_10 = { error: e_10_1 }; }\n                    finally {\n                        try {\n                            if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n                        }\n                        finally { if (e_10) throw e_10.error; }\n                    }\n                    // Paramater-inlining HF file (e.g. istanbul.json)\n                }\n                else {\n                    if (!hfChanges[1][topic]) {\n                        throw new Error(\"Topic \".concat(topic, \" not defined\"));\n                    }\n                    if (hfChanges[1][topic][name] !== undefined) {\n                        value = hfChanges[1][topic][name].v;\n                    }\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_9_1) { e_9 = { error: e_9_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n            }\n            finally { if (e_9) throw e_9.error; }\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByEIP = function (topic, name, eip) {\n        if (!(eip in eips_1.EIPs)) {\n            throw new Error(\"\".concat(eip, \" not supported\"));\n        }\n        var eipParams = eips_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(\"Topic \".concat(topic, \" not defined\"));\n        }\n        if (eipParams[topic][name] === undefined) {\n            return null;\n        }\n        var value = eipParams[topic][name].v;\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.paramByHardfork(topic, name, hardfork);\n    };\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    Common.prototype.isActivatedEIP = function (eip) {\n        var e_11, _a;\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        try {\n            for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n                var hfChanges = HARDFORK_CHANGES_3_1.value;\n                var hf = hfChanges[1];\n                if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                    if (hf['eips'].includes(eip)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        catch (e_11_1) { e_11 = { error: e_11_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n            }\n            finally { if (e_11) throw e_11.error; }\n        }\n        return false;\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        if (hfBlock && blockNumber.gte(hfBlock)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        var e_12, _a;\n        if (opts === void 0) { opts = {}; }\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        try {\n            for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n                var hf = hardforks_2_1.value;\n                if (hf['name'] === hardfork1)\n                    posHf1 = index;\n                if (hf['name'] === hardfork2)\n                    posHf2 = index;\n                index += 1;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        var e_13, _a;\n        var _b;\n        if (opts === void 0) { opts = {}; }\n        var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        try {\n            for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var hf = _d.value;\n                if (hf['name'] === hardfork && hf['block'] !== null)\n                    return true;\n            }\n        }\n        catch (e_13_1) { e_13 = { error: e_13_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_13) throw e_13.error; }\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        var e_14, _a;\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n                var hf = hfs_2_1.value;\n                if (hf['block'] === null)\n                    continue;\n                if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                    break;\n                if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                    continue;\n                activeHardforks.push(hf);\n            }\n        }\n        catch (e_14_1) { e_14 = { error: e_14_1 }; }\n        finally {\n            try {\n                if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n            }\n            finally { if (e_14) throw e_14.error; }\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        var block = this.hardforkBlockBN(hardfork);\n        return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    Common.prototype.hardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var block = this._getHardfork(hardfork)['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return new ethereumjs_util_1.BN(block);\n    };\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    Common.prototype.hardforkTD = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var td = this._getHardfork(hardfork)['td'];\n        if (td === undefined || td === null) {\n            return null;\n        }\n        return new ethereumjs_util_1.BN(td);\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        var block = this.hardforkBlockBN(hardfork);\n        return block ? block.eq(blockNumber) : false;\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n     */\n    Common.prototype.nextHardforkBlock = function (hardfork) {\n        var block = this.nextHardforkBlockBN(hardfork);\n        return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     */\n    Common.prototype.nextHardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        if (hfBlock === null) {\n            return null;\n        }\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurrence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n            var block = new ethereumjs_util_1.BN(hf.block);\n            return block.gt(hfBlock) && acc === null ? block : acc;\n        }, null);\n        return nextHfBlock;\n    };\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n        return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n    };\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @returns Fork hash as hex string\n     */\n    Common.prototype._calcForkHash = function (hardfork) {\n        var e_15, _a;\n        var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n        var hfBuffer = Buffer.alloc(0);\n        var prevBlock = 0;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                var block = hf.block;\n                // Skip for chainstart (0), not applied HFs (null) and\n                // when already applied on same block number HFs\n                if (block !== 0 && block !== null && block !== prevBlock) {\n                    var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n                    hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n                }\n                if (hf.name === hardfork)\n                    break;\n                if (block !== null) {\n                    prevBlock = block;\n                }\n            }\n        }\n        catch (e_15_1) { e_15 = { error: e_15_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_15) throw e_15.error; }\n        }\n        var inputBuffer = Buffer.concat([genesis, hfBuffer]);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n        return \"0x\".concat(forkhash);\n    };\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     */\n    Common.prototype.forkHash = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var data = this._getHardfork(hardfork);\n        if (data['block'] === null && data['td'] === undefined) {\n            var msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data['forkHash'] !== undefined) {\n            return data['forkHash'];\n        }\n        return this._calcForkHash(hardfork);\n    };\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    Common.prototype.hardforkForForkHash = function (forkHash) {\n        var resArray = this.hardforks().filter(function (hf) {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    };\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the Genesis state of the current chain,\n     * all values are provided as hex-prefixed strings.\n     */\n    Common.prototype.genesisState = function () {\n        var e_16, _a;\n        // Use require statements here in favor of import statements\n        // to load json files on demand\n        // (high memory usage by large mainnet.json genesis state file)\n        switch (this.chainName()) {\n            case 'mainnet':\n                return require('./genesisStates/mainnet.json');\n            case 'ropsten':\n                return require('./genesisStates/ropsten.json');\n            case 'rinkeby':\n                return require('./genesisStates/rinkeby.json');\n            case 'kovan':\n                return require('./genesisStates/kovan.json');\n            case 'goerli':\n                return require('./genesisStates/goerli.json');\n            case 'sepolia':\n                return require('./genesisStates/sepolia.json');\n        }\n        // Custom chains with genesis state provided\n        if (this._customChains &&\n            this._customChains.length > 0 &&\n            Array.isArray(this._customChains[0])) {\n            try {\n                for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var chainArrayWithGenesis = _c.value;\n                    if (chainArrayWithGenesis[0].name === this.chainName()) {\n                        return chainArrayWithGenesis[1];\n                    }\n                }\n            }\n            catch (e_16_1) { e_16 = { error: e_16_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_16) throw e_16.error; }\n            }\n        }\n        return {};\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    Common.prototype.dnsNetworks = function () {\n        return this._chainParams['dnsNetworks'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     * @deprecated Please use {@link Common.chainIdBN} for large number support\n     */\n    Common.prototype.chainId = function () {\n        return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     * @deprecated Please use {@link Common.networkIdBN} for large number support\n     */\n    Common.prototype.networkId = function () {\n        return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n    };\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n    Common.prototype.eips = function () {\n        return this._eips;\n    };\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusType = function () {\n        var e_17, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {\n                var hfChanges = HARDFORK_CHANGES_4_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    value = hfChanges[1]['consensus']['type'];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_17_1) { e_17 = { error: e_17_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);\n            }\n            finally { if (e_17) throw e_17.error; }\n        }\n        if (value) {\n            return value;\n        }\n        return this._chainParams['consensus']['type'];\n    };\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusAlgorithm = function () {\n        var e_18, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {\n                var hfChanges = HARDFORK_CHANGES_5_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    value = hfChanges[1]['consensus']['algorithm'];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_18_1) { e_18 = { error: e_18_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);\n            }\n            finally { if (e_18) throw e_18.error; }\n        }\n        if (value) {\n            return value;\n        }\n        return this._chainParams['consensus']['algorithm'];\n    };\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: -\n     * clique: period, epoch\n     * aura: -\n     * casper: -\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusConfig = function () {\n        var e_19, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {\n                var hfChanges = HARDFORK_CHANGES_6_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    // The config parameter is named after the respective consensus algorithm\n                    value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_19_1) { e_19 = { error: e_19_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);\n            }\n            finally { if (e_19) throw e_19.error; }\n        }\n        if (value) {\n            return value;\n        }\n        var consensusAlgorithm = this.consensusAlgorithm();\n        return this._chainParams['consensus'][consensusAlgorithm];\n    };\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    Common.prototype.copy = function () {\n        var copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.removeAllListeners();\n        return copy;\n    };\n    return Common;\n}(events_1.EventEmitter));\nexports.default = Common;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}