{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { ConnectorEvent } from '@web3-react/types';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar AbstractConnector = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(AbstractConnector, _EventEmitter);\n\n  function AbstractConnector(_temp) {\n    var _this;\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        supportedChainIds = _ref.supportedChainIds;\n\n    _this = _EventEmitter.call(this) || this;\n    _this.supportedChainIds = supportedChainIds;\n    return _this;\n  }\n\n  var _proto = AbstractConnector.prototype;\n\n  _proto.emitUpdate = function emitUpdate(update) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Update + \"' with payload\", update);\n    }\n\n    this.emit(ConnectorEvent.Update, update);\n  };\n\n  _proto.emitError = function emitError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Error + \"' with payload\", error);\n    }\n\n    this.emit(ConnectorEvent.Error, error);\n  };\n\n  _proto.emitDeactivate = function emitDeactivate() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Deactivate + \"'\");\n    }\n\n    this.emit(ConnectorEvent.Deactivate);\n  };\n\n  return AbstractConnector;\n}(EventEmitter);\n\nexport { AbstractConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","console","ConnectorEvent","emitError","emitDeactivate"],"mappings":";;;;;;;;;IAGsBA,iBAAtB,G,aAAA,UAAA,aAAA,EAAA;;;;;;kCAGkE,E,GAAA,K;QAAlDC,iBAAAA,GAAAA,IAAAA,CAAAA,iB;;;UAEZ,iB,GAAA,iB;;;;;;SALJ,U,GAcYC,SAAAA,UAAAA,CAAAA,MAAAA,EAAAA;+CACK;MACXC,OAAO,CAAPA,GAAAA,CAAAA,eAAyBC,cAAc,CAAvCD,MAAAA,GAAAA,gBAAAA,EAAAA,MAAAA;;;SAEF,I,CAAUC,cAAc,CAAxB,M,EAAA,M;EAlBJ,C;;SAAA,S,GAqBYC,SAAAA,SAAAA,CAAAA,KAAAA,EAAAA;+CACK;MACXF,OAAO,CAAPA,GAAAA,CAAAA,eAAyBC,cAAc,CAAvCD,KAAAA,GAAAA,gBAAAA,EAAAA,KAAAA;;;SAEF,I,CAAUC,cAAc,CAAxB,K,EAAA,K;EAzBJ,C;;SAAA,c,GA4BYE,SAAAA,cAAAA,GAAAA;+CACK;MACXH,OAAO,CAAPA,GAAAA,CAAAA,eAAyBC,cAAc,CAAvCD,UAAAA,GAAAA,GAAAA;;;SAEF,I,CAAUC,cAAc,CAAxB,U;EAhCJ,C;;;CAAA,CAAA,YAAA,C","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}