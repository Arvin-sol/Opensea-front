{"ast":null,"code":"\"use strict\";\n\n(function (root) {\n  const MAX_VALUE = 0x7fffffff; // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n  // See: https://github.com/dchest/scrypt-async-js\n\n  function SHA256(m) {\n    const K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n    let h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a;\n    let h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19;\n    const w = new Uint32Array(64);\n\n    function blocks(p) {\n      let off = 0,\n          len = p.length;\n\n      while (len >= 64) {\n        let a = h0,\n            b = h1,\n            c = h2,\n            d = h3,\n            e = h4,\n            f = h5,\n            g = h6,\n            h = h7,\n            u,\n            i,\n            j,\n            t1,\n            t2;\n\n        for (i = 0; i < 16; i++) {\n          j = off + i * 4;\n          w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n        }\n\n        for (i = 16; i < 64; i++) {\n          u = w[i - 2];\n          t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n          u = w[i - 15];\n          t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n          w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n        }\n\n        for (i = 0; i < 64; i++) {\n          t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n          t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        h0 = h0 + a | 0;\n        h1 = h1 + b | 0;\n        h2 = h2 + c | 0;\n        h3 = h3 + d | 0;\n        h4 = h4 + e | 0;\n        h5 = h5 + f | 0;\n        h6 = h6 + g | 0;\n        h7 = h7 + h | 0;\n        off += 64;\n        len -= 64;\n      }\n    }\n\n    blocks(m);\n    let i,\n        bytesLeft = m.length % 64,\n        bitLenHi = m.length / 0x20000000 | 0,\n        bitLenLo = m.length << 3,\n        numZeros = bytesLeft < 56 ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n    p.push(0x80);\n\n    for (i = bytesLeft + 1; i < numZeros; i++) {\n      p.push(0);\n    }\n\n    p.push(bitLenHi >>> 24 & 0xff);\n    p.push(bitLenHi >>> 16 & 0xff);\n    p.push(bitLenHi >>> 8 & 0xff);\n    p.push(bitLenHi >>> 0 & 0xff);\n    p.push(bitLenLo >>> 24 & 0xff);\n    p.push(bitLenLo >>> 16 & 0xff);\n    p.push(bitLenLo >>> 8 & 0xff);\n    p.push(bitLenLo >>> 0 & 0xff);\n    blocks(p);\n    return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];\n  }\n\n  function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n    // compress password if it's longer than hash block length\n    password = password.length <= 64 ? password : SHA256(password);\n    const innerLen = 64 + salt.length + 4;\n    const inner = new Array(innerLen);\n    const outerKey = new Array(64);\n    let i;\n    let dk = []; // inner = (password ^ ipad) || salt || counter\n\n    for (i = 0; i < 64; i++) {\n      inner[i] = 0x36;\n    }\n\n    for (i = 0; i < password.length; i++) {\n      inner[i] ^= password[i];\n    }\n\n    for (i = 0; i < salt.length; i++) {\n      inner[64 + i] = salt[i];\n    }\n\n    for (i = innerLen - 4; i < innerLen; i++) {\n      inner[i] = 0;\n    } // outerKey = password ^ opad\n\n\n    for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n\n    for (i = 0; i < password.length; i++) outerKey[i] ^= password[i]; // increments counter inside inner\n\n\n    function incrementCounter() {\n      for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n        inner[i]++;\n        if (inner[i] <= 0xff) return;\n        inner[i] = 0;\n      }\n    } // output blocks = SHA256(outerKey || SHA256(inner)) ...\n\n\n    while (dkLen >= 32) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n      dkLen -= 32;\n    }\n\n    if (dkLen > 0) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n    }\n\n    return dk;\n  } // The following is an adaptation of scryptsy\n  // See: https://www.npmjs.com/package/scryptsy\n\n\n  function blockmix_salsa8(BY, Yi, r, x, _X) {\n    let i;\n    arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n\n    for (i = 0; i < 2 * r; i++) {\n      blockxor(BY, i * 16, _X, 16);\n      salsa20_8(_X, x);\n      arraycopy(_X, 0, BY, Yi + i * 16, 16);\n    }\n\n    for (i = 0; i < r; i++) {\n      arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n    }\n\n    for (i = 0; i < r; i++) {\n      arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n    }\n  }\n\n  function R(a, b) {\n    return a << b | a >>> 32 - b;\n  }\n\n  function salsa20_8(B, x) {\n    arraycopy(B, 0, x, 0, 16);\n\n    for (let i = 8; i > 0; i -= 2) {\n      x[4] ^= R(x[0] + x[12], 7);\n      x[8] ^= R(x[4] + x[0], 9);\n      x[12] ^= R(x[8] + x[4], 13);\n      x[0] ^= R(x[12] + x[8], 18);\n      x[9] ^= R(x[5] + x[1], 7);\n      x[13] ^= R(x[9] + x[5], 9);\n      x[1] ^= R(x[13] + x[9], 13);\n      x[5] ^= R(x[1] + x[13], 18);\n      x[14] ^= R(x[10] + x[6], 7);\n      x[2] ^= R(x[14] + x[10], 9);\n      x[6] ^= R(x[2] + x[14], 13);\n      x[10] ^= R(x[6] + x[2], 18);\n      x[3] ^= R(x[15] + x[11], 7);\n      x[7] ^= R(x[3] + x[15], 9);\n      x[11] ^= R(x[7] + x[3], 13);\n      x[15] ^= R(x[11] + x[7], 18);\n      x[1] ^= R(x[0] + x[3], 7);\n      x[2] ^= R(x[1] + x[0], 9);\n      x[3] ^= R(x[2] + x[1], 13);\n      x[0] ^= R(x[3] + x[2], 18);\n      x[6] ^= R(x[5] + x[4], 7);\n      x[7] ^= R(x[6] + x[5], 9);\n      x[4] ^= R(x[7] + x[6], 13);\n      x[5] ^= R(x[4] + x[7], 18);\n      x[11] ^= R(x[10] + x[9], 7);\n      x[8] ^= R(x[11] + x[10], 9);\n      x[9] ^= R(x[8] + x[11], 13);\n      x[10] ^= R(x[9] + x[8], 18);\n      x[12] ^= R(x[15] + x[14], 7);\n      x[13] ^= R(x[12] + x[15], 9);\n      x[14] ^= R(x[13] + x[12], 13);\n      x[15] ^= R(x[14] + x[13], 18);\n    }\n\n    for (let i = 0; i < 16; ++i) {\n      B[i] += x[i];\n    }\n  } // naive approach... going back to loop unrolling may yield additional performance\n\n\n  function blockxor(S, Si, D, len) {\n    for (let i = 0; i < len; i++) {\n      D[i] ^= S[Si + i];\n    }\n  }\n\n  function arraycopy(src, srcPos, dest, destPos, length) {\n    while (length--) {\n      dest[destPos++] = src[srcPos++];\n    }\n  }\n\n  function checkBufferish(o) {\n    if (!o || typeof o.length !== 'number') {\n      return false;\n    }\n\n    for (let i = 0; i < o.length; i++) {\n      const v = o[i];\n\n      if (typeof v !== 'number' || v % 1 || v < 0 || v >= 256) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function ensureInteger(value, name) {\n    if (typeof value !== \"number\" || value % 1) {\n      throw new Error('invalid ' + name);\n    }\n\n    return value;\n  } // N = Cpu cost, r = Memory cost, p = parallelization cost\n  // callback(error, progress, key)\n\n\n  function _scrypt(password, salt, N, r, p, dkLen, callback) {\n    N = ensureInteger(N, 'N');\n    r = ensureInteger(r, 'r');\n    p = ensureInteger(p, 'p');\n    dkLen = ensureInteger(dkLen, 'dkLen');\n\n    if (N === 0 || (N & N - 1) !== 0) {\n      throw new Error('N must be power of 2');\n    }\n\n    if (N > MAX_VALUE / 128 / r) {\n      throw new Error('N too large');\n    }\n\n    if (r > MAX_VALUE / 128 / p) {\n      throw new Error('r too large');\n    }\n\n    if (!checkBufferish(password)) {\n      throw new Error('password must be an array or buffer');\n    }\n\n    password = Array.prototype.slice.call(password);\n\n    if (!checkBufferish(salt)) {\n      throw new Error('salt must be an array or buffer');\n    }\n\n    salt = Array.prototype.slice.call(salt);\n    let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n    const B = new Uint32Array(p * 32 * r);\n\n    for (let i = 0; i < B.length; i++) {\n      const j = i * 4;\n      B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;\n    }\n\n    const XY = new Uint32Array(64 * r);\n    const V = new Uint32Array(32 * r * N);\n    const Yi = 32 * r; // scratch space\n\n    const x = new Uint32Array(16); // salsa20_8\n\n    const _X = new Uint32Array(16); // blockmix_salsa8\n\n\n    const totalOps = p * N * 2;\n    let currentOp = 0;\n    let lastPercent10 = null; // Set this to true to abandon the scrypt on the next step\n\n    let stop = false; // State information\n\n    let state = 0;\n    let i0 = 0,\n        i1;\n    let Bi; // How many blockmix_salsa8 can we do per step?\n\n    const limit = callback ? parseInt(1000 / r) : 0xffffffff; // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n\n    const nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout; // This is really all I changed; making scryptsy a state machine so we occasionally\n    // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n\n    const incrementalSMix = function () {\n      if (stop) {\n        return callback(new Error('cancelled'), currentOp / totalOps);\n      }\n\n      let steps;\n\n      switch (state) {\n        case 0:\n          // for (var i = 0; i < p; i++)...\n          Bi = i0 * 32 * r;\n          arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1\n\n          state = 1; // Move to ROMix 2\n\n          i1 = 0;\n        // Fall through\n\n        case 1:\n          // Run up to 1000 steps of the first inner smix loop\n          steps = N - i1;\n\n          if (steps > limit) {\n            steps = limit;\n          }\n\n          for (let i = 0; i < steps; i++) {\n            // ROMix - 2\n            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi); // ROMix - 3\n\n            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4\n          } // for (var i = 0; i < N; i++)\n\n\n          i1 += steps;\n          currentOp += steps;\n\n          if (callback) {\n            // Call the callback with the progress (optionally stopping us)\n            const percent10 = parseInt(1000 * currentOp / totalOps);\n\n            if (percent10 !== lastPercent10) {\n              stop = callback(null, currentOp / totalOps);\n\n              if (stop) {\n                break;\n              }\n\n              lastPercent10 = percent10;\n            }\n          }\n\n          if (i1 < N) {\n            break;\n          }\n\n          i1 = 0; // Move to ROMix 6\n\n          state = 2;\n        // Fall through\n\n        case 2:\n          // Run up to 1000 steps of the second inner smix loop\n          steps = N - i1;\n\n          if (steps > limit) {\n            steps = limit;\n          }\n\n          for (let i = 0; i < steps; i++) {\n            // ROMix - 6\n            const offset = (2 * r - 1) * 16; // ROMix - 7\n\n            const j = XY[offset] & N - 1;\n            blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)\n\n            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)\n          } // for (var i = 0; i < N; i++)...\n\n\n          i1 += steps;\n          currentOp += steps; // Call the callback with the progress (optionally stopping us)\n\n          if (callback) {\n            const percent10 = parseInt(1000 * currentOp / totalOps);\n\n            if (percent10 !== lastPercent10) {\n              stop = callback(null, currentOp / totalOps);\n\n              if (stop) {\n                break;\n              }\n\n              lastPercent10 = percent10;\n            }\n          }\n\n          if (i1 < N) {\n            break;\n          }\n\n          arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10\n          // for (var i = 0; i < p; i++)...\n\n          i0++;\n\n          if (i0 < p) {\n            state = 0;\n            break;\n          }\n\n          b = [];\n\n          for (let i = 0; i < B.length; i++) {\n            b.push(B[i] >> 0 & 0xff);\n            b.push(B[i] >> 8 & 0xff);\n            b.push(B[i] >> 16 & 0xff);\n            b.push(B[i] >> 24 & 0xff);\n          }\n\n          const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen); // Send the result to the callback\n\n          if (callback) {\n            callback(null, 1.0, derivedKey);\n          } // Done; don't break (which would reschedule)\n\n\n          return derivedKey;\n      } // Schedule the next steps\n\n\n      if (callback) {\n        nextTick(incrementalSMix);\n      }\n    }; // Run the smix state machine until completion\n\n\n    if (!callback) {\n      while (true) {\n        const derivedKey = incrementalSMix();\n\n        if (derivedKey != undefined) {\n          return derivedKey;\n        }\n      }\n    } // Bootstrap the async incremental smix\n\n\n    incrementalSMix();\n  }\n\n  const lib = {\n    scrypt: function (password, salt, N, r, p, dkLen, progressCallback) {\n      return new Promise(function (resolve, reject) {\n        let lastProgress = 0;\n\n        if (progressCallback) {\n          progressCallback(0);\n        }\n\n        _scrypt(password, salt, N, r, p, dkLen, function (error, progress, key) {\n          if (error) {\n            reject(error);\n          } else if (key) {\n            if (progressCallback && lastProgress !== 1) {\n              progressCallback(1);\n            }\n\n            resolve(new Uint8Array(key));\n          } else if (progressCallback && progress !== lastProgress) {\n            lastProgress = progress;\n            return progressCallback(progress);\n          }\n        });\n      });\n    },\n    syncScrypt: function (password, salt, N, r, p, dkLen) {\n      return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n    }\n  }; // node.js\n\n  if (typeof exports !== 'undefined') {\n    module.exports = lib; // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define(lib); // Web Browsers\n  } else if (root) {\n    // If there was an existing library \"scrypt\", make sure it is still available\n    if (root.scrypt) {\n      root._scrypt = root.scrypt;\n    }\n\n    root.scrypt = lib;\n  }\n})(this);","map":{"version":3,"names":["root","MAX_VALUE","SHA256","m","K","Uint32Array","h0","h1","h2","h3","h4","h5","h6","h7","w","blocks","p","off","len","length","a","b","c","d","e","f","g","h","u","i","j","t1","t2","bytesLeft","bitLenHi","bitLenLo","numZeros","slice","push","PBKDF2_HMAC_SHA256_OneIter","password","salt","dkLen","innerLen","inner","Array","outerKey","dk","incrementCounter","concat","blockmix_salsa8","BY","Yi","r","x","_X","arraycopy","blockxor","salsa20_8","R","B","S","Si","D","src","srcPos","dest","destPos","checkBufferish","o","v","ensureInteger","value","name","Error","_scrypt","N","callback","prototype","call","XY","V","totalOps","currentOp","lastPercent10","stop","state","i0","i1","Bi","limit","parseInt","nextTick","setImmediate","setTimeout","incrementalSMix","steps","percent10","offset","derivedKey","undefined","lib","scrypt","progressCallback","Promise","resolve","reject","lastProgress","error","progress","key","Uint8Array","syncScrypt","exports","module","define","amd"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/scrypt-js/scrypt.js"],"sourcesContent":["\"use strict\";\n\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n       ]);\n\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while (len >= 64) {\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n\n                for (i = 0; i < 16; i++) {\n                    j = off + i*4;\n                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n                }\n\n                for (i = 16; i < 64; i++) {\n                    u = w[i-2];\n                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n                    u = w[i-15];\n                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n                }\n\n                for (i = 0; i < 64; i++) {\n                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = (d + t1) | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = (t1 + t2) | 0;\n                }\n\n                h0 = (h0 + a) | 0;\n                h1 = (h1 + b) | 0;\n                h2 = (h2 + c) | 0;\n                h3 = (h3 + d) | 0;\n                h4 = (h4 + e) | 0;\n                h5 = (h5 + f) | 0;\n                h6 = (h6 + g) | 0;\n                h7 = (h7 + h) | 0;\n\n                off += 64;\n                len -= 64;\n            }\n        }\n\n        blocks(m);\n\n        let i, bytesLeft = m.length % 64,\n        bitLenHi = (m.length / 0x20000000) | 0,\n        bitLenLo = m.length << 3,\n        numZeros = (bytesLeft < 56) ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n\n        p.push(0x80);\n        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }\n        p.push((bitLenHi >>> 24) & 0xff);\n        p.push((bitLenHi >>> 16) & 0xff);\n        p.push((bitLenHi >>> 8)  & 0xff);\n        p.push((bitLenHi >>> 0)  & 0xff);\n        p.push((bitLenLo >>> 24) & 0xff);\n        p.push((bitLenLo >>> 16) & 0xff);\n        p.push((bitLenLo >>> 8)  & 0xff);\n        p.push((bitLenLo >>> 0)  & 0xff);\n\n        blocks(p);\n\n        return [\n            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,\n            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,\n            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,\n            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,\n            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,\n            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,\n            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,\n            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff\n        ];\n    }\n\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = (password.length <= 64) ? password : SHA256(password);\n\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n\n        let i;\n        let dk = [];\n\n        // inner = (password ^ ipad) || salt || counter\n        for (i = 0; i < 64; i++) { inner[i] = 0x36; }\n        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }\n        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }\n        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }\n\n        // outerKey = password ^ opad\n        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n        // increments counter inside inner\n        function incrementCounter() {\n            for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while (dkLen >= 32) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n\n        return dk;\n    }\n\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for (i = 0; i < 2 * r; i++) {\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n\n    function R(a, b) {\n        return (a << b) | (a >>> (32 - b));\n    }\n\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n\n        for (let i = 8; i > 0; i -= 2) {\n            x[ 4] ^= R(x[ 0] + x[12], 7);\n            x[ 8] ^= R(x[ 4] + x[ 0], 9);\n            x[12] ^= R(x[ 8] + x[ 4], 13);\n            x[ 0] ^= R(x[12] + x[ 8], 18);\n            x[ 9] ^= R(x[ 5] + x[ 1], 7);\n            x[13] ^= R(x[ 9] + x[ 5], 9);\n            x[ 1] ^= R(x[13] + x[ 9], 13);\n            x[ 5] ^= R(x[ 1] + x[13], 18);\n            x[14] ^= R(x[10] + x[ 6], 7);\n            x[ 2] ^= R(x[14] + x[10], 9);\n            x[ 6] ^= R(x[ 2] + x[14], 13);\n            x[10] ^= R(x[ 6] + x[ 2], 18);\n            x[ 3] ^= R(x[15] + x[11], 7);\n            x[ 7] ^= R(x[ 3] + x[15], 9);\n            x[11] ^= R(x[ 7] + x[ 3], 13);\n            x[15] ^= R(x[11] + x[ 7], 18);\n            x[ 1] ^= R(x[ 0] + x[ 3], 7);\n            x[ 2] ^= R(x[ 1] + x[ 0], 9);\n            x[ 3] ^= R(x[ 2] + x[ 1], 13);\n            x[ 0] ^= R(x[ 3] + x[ 2], 18);\n            x[ 6] ^= R(x[ 5] + x[ 4], 7);\n            x[ 7] ^= R(x[ 6] + x[ 5], 9);\n            x[ 4] ^= R(x[ 7] + x[ 6], 13);\n            x[ 5] ^= R(x[ 4] + x[ 7], 18);\n            x[11] ^= R(x[10] + x[ 9], 7);\n            x[ 8] ^= R(x[11] + x[10], 9);\n            x[ 9] ^= R(x[ 8] + x[11], 13);\n            x[10] ^= R(x[ 9] + x[ 8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n\n        for (let i = 0; i < 16; ++i) {\n            B[i] += x[i];\n        }\n    }\n\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for (let i = 0; i < len; i++) {\n            D[i] ^= S[Si + i]\n        }\n    }\n\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while (length--) {\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n\n    function checkBufferish(o) {\n        if (!o || typeof(o.length) !== 'number') { return false; }\n\n        for (let i = 0; i < o.length; i++) {\n            const v = o[i];\n            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function ensureInteger(value, name) {\n        if (typeof(value) !== \"number\" || (value % 1)) { throw new Error('invalid ' + name); }\n        return value;\n    }\n\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n\n        N = ensureInteger(N, 'N');\n        r = ensureInteger(r, 'r');\n        p = ensureInteger(p, 'p');\n\n        dkLen = ensureInteger(dkLen, 'dkLen');\n\n        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }\n\n        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }\n        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }\n\n        if (!checkBufferish(password)) {\n            throw new Error('password must be an array or buffer');\n        }\n        password = Array.prototype.slice.call(password);\n\n        if (!checkBufferish(salt)) {\n            throw new Error('salt must be an array or buffer');\n        }\n        salt = Array.prototype.slice.call(salt);\n\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r)\n        for (let i = 0; i < B.length; i++) {\n            const j = i * 4;\n            B[i] = ((b[j + 3] & 0xff) << 24) |\n                   ((b[j + 2] & 0xff) << 16) |\n                   ((b[j + 1] & 0xff) << 8) |\n                   ((b[j + 0] & 0xff) << 0);\n        }\n\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n\n        const Yi = 32 * r;\n\n        // scratch space\n        const x = new Uint32Array(16);       // salsa20_8\n        const _X = new Uint32Array(16);      // blockmix_salsa8\n\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r): 0xffffffff;\n\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;\n\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error('cancelled'), currentOp / totalOps);\n            }\n\n            let steps;\n\n            switch (state) {\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n\n                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1\n\n                    state = 1;                                         // Move to ROMix 2\n                    i1 = 0;\n\n                    // Fall through\n\n                case 1:\n\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                  // ROMix - 2\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3\n                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4\n                    }\n\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    i1 = 0;                                          // Move to ROMix 6\n                    state = 2;\n\n                    // Fall through\n\n                case 2:\n\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                // ROMix - 6\n                        const offset = (2 * r - 1) * 16;             // ROMix - 7\n                        const j = XY[offset] & (N - 1);\n                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)\n                    }\n\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10\n\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n\n                    b = [];\n                    for (let i = 0; i < B.length; i++) {\n                        b.push((B[i] >>  0) & 0xff);\n                        b.push((B[i] >>  8) & 0xff);\n                        b.push((B[i] >> 16) & 0xff);\n                        b.push((B[i] >> 24) & 0xff);\n                    }\n\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n\n                    // Send the result to the callback\n                    if (callback) { callback(null, 1.0, derivedKey); }\n\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n\n            // Schedule the next steps\n            if (callback) { nextTick(incrementalSMix); }\n        }\n\n        // Run the smix state machine until completion\n        if (!callback) {\n            while (true) {\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) { return derivedKey; }\n            }\n        }\n\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) { progressCallback(0); }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n\n    // node.js\n    if (typeof(exports) !== 'undefined') {\n       module.exports = lib;\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(lib);\n\n    // Web Browsers\n    } else if (root) {\n\n        // If there was an existing library \"scrypt\", make sure it is still available\n        if (root.scrypt) {\n            root._scrypt = root.scrypt;\n        }\n\n        root.scrypt = lib;\n    }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}