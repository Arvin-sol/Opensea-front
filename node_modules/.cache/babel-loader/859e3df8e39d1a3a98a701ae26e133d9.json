{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\n\n\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\n\nfunction safeParseInt(v, base) {\n  if (v[0] === '0' && v[1] === '0') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseInt(v, base);\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\n\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n\n  var decoded = _decode(inputBuffer);\n\n  if (stream) {\n    return decoded;\n  }\n\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n\n  return decoded.data;\n}\n\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\n\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length_1;\n  }\n}\n\nexports.getLength = getLength;\n/** Decode an input with RLP */\n\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n\n    data = input.slice(llength, length + llength);\n\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n\n    innerRemainder = input.slice(llength, totalLength);\n\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\n\n\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\n\n\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\n\n\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\n\n\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\n\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (bn_js_1.default.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLength = exports.decode = exports.encode = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        var output = [];\n        for (var i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        var buf = Buffer.concat(output);\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\n    }\n    else {\n        var inputBuf = toBuffer(input);\n        return inputBuf.length === 1 && inputBuf[0] < 128\n            ? inputBuf\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n    }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n    if (v[0] === '0' && v[1] === '0') {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Buffer.from([len + offset]);\n    }\n    else {\n        var hexLength = intToHex(len);\n        var lLength = hexLength.length / 2;\n        var firstByte = intToHex(offset + 55 + lLength);\n        return Buffer.from(firstByte + hexLength, 'hex');\n    }\n}\nfunction decode(input, stream) {\n    if (stream === void 0) { stream = false; }\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var decoded = _decode(inputBuffer);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid remainder');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var firstByte = inputBuffer[0];\n    if (firstByte <= 0x7f) {\n        return inputBuffer.length;\n    }\n    else if (firstByte <= 0xb7) {\n        return firstByte - 0x7f;\n    }\n    else if (firstByte <= 0xbf) {\n        return firstByte - 0xb6;\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        return firstByte - 0xbf;\n    }\n    else {\n        // a list  over 55 bytes long\n        var llength = firstByte - 0xf6;\n        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n        return llength + length_1;\n    }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    var length, llength, data, innerRemainder, d;\n    var decoded = [];\n    var firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Buffer.from([]);\n        }\n        else {\n            data = input.slice(1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = input.slice(llength, length + llength);\n        if (data.length < length) {\n            throw new Error('invalid RLP: not enough bytes for string');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = input.slice(1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list  over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        var totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid rlp: total length is larger than the data');\n        }\n        innerRemainder = input.slice(llength, totalLength);\n        if (innerRemainder.length === 0) {\n            throw new Error('invalid rlp, List has a invalid length');\n        }\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    var hex = integer.toString(16);\n    return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n    var hex = intToHex(integer);\n    return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (typeof v === 'string') {\n            if (isHexPrefixed(v)) {\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n            }\n            else {\n                return Buffer.from(v);\n            }\n        }\n        else if (typeof v === 'number' || typeof v === 'bigint') {\n            if (!v) {\n                return Buffer.from([]);\n            }\n            else {\n                return intToBuffer(v);\n            }\n        }\n        else if (v === null || v === undefined) {\n            return Buffer.from([]);\n        }\n        else if (v instanceof Uint8Array) {\n            return Buffer.from(v);\n        }\n        else if (bn_js_1.default.isBN(v)) {\n            // converts a BN to a Buffer\n            return Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}