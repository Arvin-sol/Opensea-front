{"ast":null,"code":"(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function (punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  } else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n})(this, function (punycode, idna_map) {\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n    var chars = punycode.ucs2.decode(label);\n\n    for (var i = 0; i < chars.length; i++) {\n      var cp = chars[i];\n      var ch = punycode.ucs2.encode([chars[i]]);\n      var composite = idna_map.mapChar(cp);\n      var flags = composite >> 23;\n      var kind = composite >> 21 & 3;\n      var index = composite >> 5 & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n\n      if (kind === 0 || useStd3ASCII && flags & 1) {\n        throw new Error(\"Illegal char \" + ch);\n      } else if (kind === 1) {\n        mapped.push(value);\n      } else if (kind === 2) {\n        mapped.push(transitional ? value : ch);\n      }\n      /* istanbul ignore next */\n      else if (kind === 3) {\n        mapped.push(ch);\n      }\n    }\n\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n\n  function process(domain, transitional, useStd3ASCII) {\n    /* istanbul ignore if */\n    if (useStd3ASCII === undefined) useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional); // Step 3. Break\n\n    var labels = mappedIDNA.split(\".\"); // Step 4. Convert/Validate\n\n    labels = labels.map(function (label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      } else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n\n      return label;\n    });\n    return labels.join(\".\");\n  }\n\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] === '-' && label[3] === '-') throw new Error(\"Failed to validate \" + label); // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n\n    if (label.startsWith('-') || label.endsWith('-')) throw new Error(\"Failed to validate \" + label); // 4. The label must not contain a U+002E ( . ) FULL STOP.\n    // this should nerver happen as label is chunked internally by this character\n\n    /* istanbul ignore if */\n\n    if (label.includes('.')) throw new Error(\"Failed to validate \" + label);\n    if (mapLabel(label, useStd3ASCII, transitional) !== label) throw new Error(\"Failed to validate \" + label); // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & 0x2 << 23) throw new Error(\"Label contains illegal character: \" + ch);\n  }\n\n  function toAscii(domain, options) {\n    if (options === undefined) options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n    var i;\n\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n\n      for (i = 0; i < asciiLabels.length; i++) {\n        //for .. of replacement\n        var label = asciiLabels[i];\n        if (label.length < 1 || label.length > 63) throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n\n    return asciiString;\n  }\n\n  function toUnicode(domain, options) {\n    if (options === undefined) options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii\n  };\n});","map":{"version":3,"names":["root","factory","define","amd","punycode","idna_map","exports","module","require","uts46","mapLabel","label","useStd3ASCII","transitional","mapped","chars","ucs2","decode","i","length","cp","ch","encode","composite","mapChar","flags","kind","index","value","mapStr","substr","Error","push","newLabel","join","normalize","process","domain","undefined","mappedIDNA","labels","split","map","startsWith","substring","validateLabel","endsWith","includes","codePointAt","toAscii","options","verifyDnsLength","asciiLabels","toASCII","asciiString","toUnicode"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/node_modules/idna-uts46-hx/uts46.js"],"sourcesContent":["(function(root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function(punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  }\n  else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  }\n  else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n}(this, function(punycode, idna_map) {\n\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n    var chars = punycode.ucs2.decode(label);\n    for (var i = 0; i < chars.length; i++) {\n      var cp = chars[i];\n      var ch = punycode.ucs2.encode([chars[i]]);\n      var composite = idna_map.mapChar(cp);\n      var flags = (composite >> 23);\n      var kind = (composite >> 21) & 3;\n      var index = (composite >> 5) & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n      if (kind === 0 || (useStd3ASCII && (flags & 1))) {\n        throw new Error(\"Illegal char \" + ch);\n      }\n      else if (kind === 1) {\n        mapped.push(value);\n      }\n      else if (kind === 2) {\n        mapped.push(transitional ? value : ch);\n      }\n      /* istanbul ignore next */\n      else if (kind === 3) {\n        mapped.push(ch);\n      }\n    }\n\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n\n  function process(domain, transitional, useStd3ASCII) {\n    /* istanbul ignore if */\n    if (useStd3ASCII === undefined)\n      useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);\n\n    // Step 3. Break\n    var labels = mappedIDNA.split(\".\");\n\n    // Step 4. Convert/Validate\n    labels = labels.map(function(label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      }\n      else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n      return label;\n    });\n\n    return labels.join(\".\");\n  }\n\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] === '-' && label[3] === '-')\n      throw new Error(\"Failed to validate \" + label);\n\n    // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n    if (label.startsWith('-') || label.endsWith('-'))\n      throw new Error(\"Failed to validate \" + label);\n\n    // 4. The label must not contain a U+002E ( . ) FULL STOP.\n    // this should nerver happen as label is chunked internally by this character\n    /* istanbul ignore if */\n    if (label.includes('.'))\n      throw new Error(\"Failed to validate \" + label);\n\n    if (mapLabel(label, useStd3ASCII, transitional) !== label)\n      throw new Error(\"Failed to validate \" + label);\n\n    // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & (0x2 << 23))\n      throw new Error(\"Label contains illegal character: \" + ch);\n  }\n\n  function toAscii(domain, options) {\n    if (options === undefined)\n      options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n    var i;\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n      for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement\n        var label = asciiLabels[i];\n        if (label.length < 1 || label.length > 63)\n          throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n    return asciiString;\n  }\n\n  function toUnicode(domain, options) {\n    if (options === undefined)\n      options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii,\n  };\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}