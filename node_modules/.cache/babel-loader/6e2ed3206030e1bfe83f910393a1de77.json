{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),\n      signature = _a.signature,\n      recovery = _a.recid;\n\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (vBN.eqn(0) || vBN.eqn(1)) return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  var rec = new externals_1.BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\n\n\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\n\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\n\nvar toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\n\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\n\nvar toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n  var ss = s;\n\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\n\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\n\nvar fromRpcSig = function (sig) {\n  var buf = (0, bytes_1.toBuffer)(sig);\n  var r;\n  var s;\n  var v;\n\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  } // support both versions of `eth_sign` responses\n\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\n\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new externals_1.BN(r);\n  var sBN = new externals_1.BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\nvar hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\n\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n    var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;\n    var r = Buffer.from(signature.slice(0, 32));\n    var s = Buffer.from(signature.slice(32, 64));\n    if (!chainId || typeof chainId === 'number') {\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n        if (chainId && !Number.isSafeInteger(chainId)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n        }\n        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n        return { r: r, s: s, v: v_1 };\n    }\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n    return { r: r, s: s, v: v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n    if (vBN.eqn(0) || vBN.eqn(1))\n        return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n    if (!chainId) {\n        return vBN.subn(27);\n    }\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n    return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n    var rec = new externals_1.BN(recovery);\n    return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n    return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nvar toCompactSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n    var ss = s;\n    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nvar fromRpcSig = function (sig) {\n    var buf = (0, bytes_1.toBuffer)(sig);\n    var r;\n    var s;\n    var v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToInt)(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: r,\n        s: s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new externals_1.BN(r);\n    var sBN = new externals_1.BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nvar hashPersonalMessage = function (message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n    return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}