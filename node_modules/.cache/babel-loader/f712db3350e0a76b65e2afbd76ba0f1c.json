{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\n\nvar Contract = require('web3-eth-contract');\n\nvar namehash = require('eth-ens-namehash');\n\nvar PromiEvent = require('web3-core-promievent');\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\n\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\n\n\nfunction Registry(ens) {\n  var self = this;\n  this.ens = ens;\n  this.contract = ens.checkNetwork().then(function (address) {\n    var contract = new Contract(REGISTRY_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\n\n\nRegistry.prototype.owner = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n  return this.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\n\n\nRegistry.prototype.getOwner = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.owner(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\n\n\nRegistry.prototype.getTTL = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.ttl(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\n\n\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\n\n\nRegistry.prototype.recordExists = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.recordExists(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\n\n\nRegistry.prototype.resolver = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n  return this.getResolver(name, callback);\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\n\n\nRegistry.prototype.getResolver = function (name, callback) {\n  var self = this;\n  return this.contract.then(function (contract) {\n    return contract.methods.resolver(namehash.hash(name)).call();\n  }).then(function (address) {\n    var contract = new Contract(RESOLVER_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n\n    if (typeof callback === 'function') {\n      // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n      callback(contract, contract);\n      return;\n    }\n\n    return contract;\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  });\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\nmodule.exports = Registry;","map":{"version":3,"names":["Contract","require","namehash","PromiEvent","formatters","utils","REGISTRY_ABI","RESOLVER_ABI","Registry","ens","self","contract","checkNetwork","then","address","setProvider","eth","currentProvider","prototype","owner","name","callback","console","warn","getOwner","promiEvent","methods","hash","call","receipt","resolve","catch","error","reject","eventEmitter","setOwner","txConfig","inputAddressFormatter","send","getTTL","ttl","setTTL","setSubnodeOwner","label","isHexStrict","sha3","setRecord","resolver","setSubnodeRecord","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","getResolver","setResolver","module","exports"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/build/opensea-clone3/node_modules/web3-eth-ens/lib/contracts/Registry.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\nvar Contract = require('web3-eth-contract');\nvar namehash = require('eth-ens-namehash');\nvar PromiEvent = require('web3-core-promievent');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\nfunction Registry(ens) {\n    var self = this;\n    this.ens = ens;\n    this.contract = ens.checkNetwork().then(function (address) {\n        var contract = new Contract(REGISTRY_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        return contract;\n    });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.owner = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n    return this.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.getOwner = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.owner(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\nRegistry.prototype.getTTL = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.ttl(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.recordExists = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.recordExists(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.resolver = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n    return this.getResolver(name, callback);\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.getResolver = function (name, callback) {\n    var self = this;\n    return this.contract.then(function (contract) {\n        return contract.methods.resolver(namehash.hash(name)).call();\n    }).then(function (address) {\n        var contract = new Contract(RESOLVER_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        if (typeof callback === 'function') {\n            // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n            callback(contract, contract);\n            return;\n        }\n        return contract;\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function (contract) {\n        return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (typeof callback === 'function') {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\nmodule.exports = Registry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}