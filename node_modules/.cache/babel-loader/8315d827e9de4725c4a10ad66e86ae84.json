{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\n\nconst utils = require('web3-utils');\n\nconst BigNumber = require('bn.js');\n\nconst leftPad = function (string, bytes) {\n  let result = string;\n\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\n\n\nconst iso13616Prepare = function (iban) {\n  const A = 'A'.charCodeAt(0);\n  const Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.slice(4) + iban.slice(0, 4);\n  return iban.split('').map(function (n) {\n    const code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\n\n\nconst mod9710 = function (iban) {\n  let remainder = iban;\n  let block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\n\n\nclass Iban {\n  constructor(iban) {\n    this._iban = iban;\n  }\n  /**\n   * This method should be used to create an ethereum address from a direct iban address\n   *\n   * @method toAddress\n   * @param {String} iban address\n   * @return {String} the ethereum address\n   */\n\n\n  static toAddress(ib) {\n    ib = new Iban(ib);\n\n    if (!ib.isDirect()) {\n      throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n\n    return ib.toAddress();\n  }\n  /**\n   * This method should be used to create iban address from an ethereum address\n   *\n   * @method toIban\n   * @param {String} address\n   * @return {String} the IBAN address\n   */\n\n\n  static toIban(address) {\n    return Iban.fromAddress(address).toString();\n  }\n  /**\n   * This method should be used to create iban object from an ethereum address\n   *\n   * @method fromAddress\n   * @param {String} address\n   * @return {Iban} the IBAN object\n   */\n\n\n  static fromAddress(address) {\n    if (!utils.isAddress(address)) {\n      throw new Error('Provided address is not a valid address: ' + address);\n    }\n\n    address = address.replace('0x', '').replace('0X', '');\n    const asBn = new BigNumber(address, 16);\n    const base36 = asBn.toString(36);\n    const padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n  }\n  /**\n   * Convert the passed BBAN to an IBAN for this country specification.\n   * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n   *\n   * @method fromBban\n   * @param {String} bban the BBAN to convert to IBAN\n   * @returns {Iban} the IBAN object\n   */\n\n\n  static fromBban(bban) {\n    const countryCode = 'XE';\n    const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    const checkDigit = ('0' + (98 - remainder)).slice(-2);\n    return new Iban(countryCode + checkDigit + bban);\n  }\n  /**\n   * Should be used to create IBAN object for given institution and identifier\n   *\n   * @method createIndirect\n   * @param {Object} options, required options are \"institution\" and \"identifier\"\n   * @return {Iban} the IBAN object\n   */\n\n\n  static createIndirect(options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n  }\n  /**\n   * This method should be used to check if given string is valid iban object\n   *\n   * @method isValid\n   * @param {String} iban string\n   * @return {Boolean} true if it is valid IBAN\n   */\n\n\n  static isValid(iban) {\n    const i = new Iban(iban);\n    return i.isValid();\n  }\n\n  /**\n   * Should be called to check if iban is correct\n   *\n   * @method isValid\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isValid() {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n  }\n\n  /**\n   * Should be called to check if iban number is direct\n   *\n   * @method isDirect\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isDirect() {\n    return this._iban.length === 34 || this._iban.length === 35;\n  }\n\n  /**\n   * Should be called to check if iban number if indirect\n   *\n   * @method isIndirect\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isIndirect() {\n    return this._iban.length === 20;\n  }\n\n  /**\n   * Should be called to get iban checksum\n   * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n   *\n   * @method checksum\n   * @returns {String} checksum\n   */\n  checksum() {\n    return this._iban.slice(2, 4);\n  }\n\n  /**\n   * Should be called to get institution identifier\n   * eg. XREG\n   *\n   * @method institution\n   * @returns {String} institution identifier\n   */\n  institution() {\n    return this.isIndirect() ? this._iban.slice(7, 11) : '';\n  }\n\n  /**\n   * Should be called to get client identifier within institution\n   * eg. GAVOFYORK\n   *\n   * @method client\n   * @returns {String} client identifier\n   */\n  client() {\n    return this.isIndirect() ? this._iban.slice(11) : '';\n  }\n\n  /**\n   * Should be called to get client direct address\n   *\n   * @method toAddress\n   * @returns {String} ethereum address\n   */\n  toAddress() {\n    if (this.isDirect()) {\n      const base36 = this._iban.slice(4);\n\n      const asBn = new BigNumber(base36, 36);\n      return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n\n    return '';\n  }\n\n  toString() {\n    return this._iban;\n  }\n\n}\n\nmodule.exports = Iban;","map":{"version":3,"names":["utils","require","BigNumber","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","slice","split","map","n","code","join","mod9710","remainder","block","parseInt","Iban","constructor","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","isAddress","replace","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","test","isIndirect","checksum","client","toChecksumAddress","module","exports"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/node_modules/web3-eth-iban/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\nconst utils = require('web3-utils');\nconst BigNumber = require('bn.js');\nconst leftPad = function (string, bytes) {\n    let result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = function (iban) {\n    const A = 'A'.charCodeAt(0);\n    const Z = 'Z'.charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.slice(4) + iban.slice(0, 4);\n    return iban.split('').map(function (n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        }\n        else {\n            return n;\n        }\n    }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = function (iban) {\n    let remainder = iban;\n    let block;\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nclass Iban {\n    constructor(iban) {\n        this._iban = iban;\n    }\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     * @param {String} iban address\n     * @return {String} the ethereum address\n     */\n    static toAddress(ib) {\n        ib = new Iban(ib);\n        if (!ib.isDirect()) {\n            throw new Error('IBAN is indirect and can\\'t be converted');\n        }\n        return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */\n    static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */\n    static fromAddress(address) {\n        if (!utils.isAddress(address)) {\n            throw new Error('Provided address is not a valid address: ' + address);\n        }\n        address = address.replace('0x', '').replace('0X', '');\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */\n    static fromBban(bban) {\n        const countryCode = 'XE';\n        const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n        const checkDigit = ('0' + (98 - remainder)).slice(-2);\n        return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */\n    static createIndirect(options) {\n        return Iban.fromBban('ETH' + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */\n    static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n    ;\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isValid() {\n        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n            mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n    ;\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n    ;\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isIndirect() {\n        return this._iban.length === 20;\n    }\n    ;\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */\n    checksum() {\n        return this._iban.slice(2, 4);\n    }\n    ;\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */\n    institution() {\n        return this.isIndirect() ? this._iban.slice(7, 11) : '';\n    }\n    ;\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */\n    client() {\n        return this.isIndirect() ? this._iban.slice(11) : '';\n    }\n    ;\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */\n    toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.slice(4);\n            const asBn = new BigNumber(base36, 36);\n            return utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n        return '';\n    }\n    ;\n    toString() {\n        return this._iban;\n    }\n    ;\n}\nmodule.exports = Iban;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}