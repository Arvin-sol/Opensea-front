{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nlet ModifiersNest = {\n  calldata: true,\n  memory: true\n};\n\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n\n  return false;\n} // @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\n\nfunction parseParamType(param, allowIndexed) {\n  let originalParam = param;\n\n  function throwError(i) {\n    logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n  }\n\n  param = param.replace(/\\s/g, \" \");\n\n  function newNode(parent) {\n    let node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n\n    return node;\n  }\n\n  let parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  let node = parent;\n\n  for (let i = 0; i < param.length; i++) {\n    let c = param[i];\n\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n\n      case \")\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        let child = node;\n        node = node.parent;\n\n        if (!node) {\n          throwError(i);\n        }\n\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n\n      case \",\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        let sibling = newNode(node.parent); //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        } // If reading name, the name is done\n\n\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              if (node.indexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n\n        break;\n\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n\n    }\n  }\n\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n\n  delete parent.state;\n\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n\n  parent.type = verifyType(parent.type);\n  return parent;\n}\n\nfunction populate(object, params) {\n  for (let key in params) {\n    defineReadOnly(object, key, params[key]);\n  }\n}\n\nexport const FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readable with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n  constructor(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n\n    populate(this, params);\n    let match = this.type.match(paramTypeArray);\n\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n\n    this._isParamType = true;\n    Object.freeze(this);\n  } // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === FormatTypes.json) {\n      let result = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name: this.name || undefined\n      };\n\n      if (typeof this.indexed === \"boolean\") {\n        result.indexed = this.indexed;\n      }\n\n      if (this.components) {\n        result.components = this.components.map(comp => JSON.parse(comp.format(format)));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    let result = \"\"; // Array\n\n    if (this.baseType === \"array\") {\n      result += this.arrayChildren.format(format);\n      result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n    } else {\n      if (this.baseType === \"tuple\") {\n        if (format !== FormatTypes.sighash) {\n          result += this.type;\n        }\n\n        result += \"(\" + this.components.map(comp => comp.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n\n    if (format !== FormatTypes.sighash) {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n\n      if (format === FormatTypes.full && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n\n    return result;\n  }\n\n  static from(value, allowIndexed) {\n    if (typeof value === \"string\") {\n      return ParamType.fromString(value, allowIndexed);\n    }\n\n    return ParamType.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (ParamType.isParamType(value)) {\n      return value;\n    }\n\n    return new ParamType(_constructorGuard, {\n      name: value.name || null,\n      type: verifyType(value.type),\n      indexed: value.indexed == null ? null : !!value.indexed,\n      components: value.components ? value.components.map(ParamType.fromObject) : null\n    });\n  }\n\n  static fromString(value, allowIndexed) {\n    function ParamTypify(node) {\n      return ParamType.fromObject({\n        name: node.name,\n        type: node.type,\n        indexed: node.indexed,\n        components: node.components\n      });\n    }\n\n    return ParamTypify(parseParamType(value, !!allowIndexed));\n  }\n\n  static isParamType(value) {\n    return !!(value != null && value._isParamType);\n  }\n\n}\n;\n\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(param => ParamType.fromString(param, allowIndex));\n}\n\nexport class Fragment {\n  constructor(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n\n  static from(value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return Fragment.fromString(value);\n    }\n\n    return Fragment.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n\n    switch (value.type) {\n      case \"function\":\n        return FunctionFragment.fromObject(value);\n\n      case \"event\":\n        return EventFragment.fromObject(value);\n\n      case \"constructor\":\n        return ConstructorFragment.fromObject(value);\n\n      case \"error\":\n        return ErrorFragment.fromObject(value);\n\n      case \"fallback\":\n      case \"receive\":\n        // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n        return null;\n    }\n\n    return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n  }\n\n  static fromString(value) {\n    // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n    value = value.replace(/\\s/g, \" \");\n    value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n    value = value.trim();\n\n    if (value.split(\" \")[0] === \"event\") {\n      return EventFragment.fromString(value.substring(5).trim());\n    } else if (value.split(\" \")[0] === \"function\") {\n      return FunctionFragment.fromString(value.substring(8).trim());\n    } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n      return ConstructorFragment.fromString(value.trim());\n    } else if (value.split(\" \")[0] === \"error\") {\n      return ErrorFragment.fromString(value.substring(5).trim());\n    }\n\n    return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n  }\n\n  static isFragment(value) {\n    return !!(value && value._isFragment);\n  }\n\n}\nexport class EventFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n\n    let result = \"\";\n\n    if (format !== FormatTypes.sighash) {\n      result += \"event \";\n    }\n\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (format !== FormatTypes.sighash) {\n      if (this.anonymous) {\n        result += \"anonymous \";\n      }\n    }\n\n    return result.trim();\n  }\n\n  static from(value) {\n    if (typeof value === \"string\") {\n      return EventFragment.fromString(value);\n    }\n\n    return EventFragment.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (EventFragment.isEventFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"event\") {\n      logger.throwArgumentError(\"invalid event object\", \"value\", value);\n    }\n\n    const params = {\n      name: verifyIdentifier(value.name),\n      anonymous: value.anonymous,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      type: \"event\"\n    };\n    return new EventFragment(_constructorGuard, params);\n  }\n\n  static fromString(value) {\n    let match = value.match(regexParen);\n\n    if (!match) {\n      logger.throwArgumentError(\"invalid event string\", \"value\", value);\n    }\n\n    let anonymous = false;\n    match[3].split(\" \").forEach(modifier => {\n      switch (modifier.trim()) {\n        case \"anonymous\":\n          anonymous = true;\n          break;\n\n        case \"\":\n          break;\n\n        default:\n          logger.warn(\"unknown modifier: \" + modifier);\n      }\n    });\n    return EventFragment.fromObject({\n      name: match[1].trim(),\n      anonymous: anonymous,\n      inputs: parseParams(match[2], true),\n      type: \"event\"\n    });\n  }\n\n  static isEventFragment(value) {\n    return value && value._isFragment && value.type === \"event\";\n  }\n\n}\n\nfunction parseGas(value, params) {\n  params.gas = null;\n  let comps = value.split(\"@\");\n\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n\n    params.gas = BigNumber.from(comps[1]);\n    return comps[0];\n  }\n\n  return value;\n}\n\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(modifier => {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\n\nfunction verifyState(value) {\n  let result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property\n\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    } // Set (and check things are consistent) the payable property\n\n\n    result.payable = result.stateMutability === \"payable\";\n\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume\n\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    result.constant = !!value.constant;\n\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n\n  return result;\n}\n\nexport class ConstructorFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"format(sighash)\"\n      });\n    }\n\n    let result = \"constructor(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n      result += this.stateMutability + \" \";\n    }\n\n    return result.trim();\n  }\n\n  static from(value) {\n    if (typeof value === \"string\") {\n      return ConstructorFragment.fromString(value);\n    }\n\n    return ConstructorFragment.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (ConstructorFragment.isConstructorFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n    }\n\n    let state = verifyState(value);\n\n    if (state.constant) {\n      logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n    }\n\n    const params = {\n      name: null,\n      type: value.type,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? BigNumber.from(value.gas) : null\n    };\n    return new ConstructorFragment(_constructorGuard, params);\n  }\n\n  static fromString(value) {\n    let params = {\n      type: \"constructor\"\n    };\n    value = parseGas(value, params);\n    let parens = value.match(regexParen);\n\n    if (!parens || parens[1].trim() !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n    }\n\n    params.inputs = parseParams(parens[2].trim(), false);\n    parseModifiers(parens[3].trim(), params);\n    return ConstructorFragment.fromObject(params);\n  }\n\n  static isConstructorFragment(value) {\n    return value && value._isFragment && value.type === \"constructor\";\n  }\n\n}\nexport class FunctionFragment extends ConstructorFragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format))),\n        outputs: this.outputs.map(output => JSON.parse(output.format(format)))\n      });\n    }\n\n    let result = \"\";\n\n    if (format !== FormatTypes.sighash) {\n      result += \"function \";\n    }\n\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (format !== FormatTypes.sighash) {\n      if (this.stateMutability) {\n        if (this.stateMutability !== \"nonpayable\") {\n          result += this.stateMutability + \" \";\n        }\n      } else if (this.constant) {\n        result += \"view \";\n      }\n\n      if (this.outputs && this.outputs.length) {\n        result += \"returns (\" + this.outputs.map(output => output.format(format)).join(\", \") + \") \";\n      }\n\n      if (this.gas != null) {\n        result += \"@\" + this.gas.toString() + \" \";\n      }\n    }\n\n    return result.trim();\n  }\n\n  static from(value) {\n    if (typeof value === \"string\") {\n      return FunctionFragment.fromString(value);\n    }\n\n    return FunctionFragment.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (FunctionFragment.isFunctionFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"function\") {\n      logger.throwArgumentError(\"invalid function object\", \"value\", value);\n    }\n\n    let state = verifyState(value);\n    const params = {\n      type: value.type,\n      name: verifyIdentifier(value.name),\n      constant: state.constant,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? BigNumber.from(value.gas) : null\n    };\n    return new FunctionFragment(_constructorGuard, params);\n  }\n\n  static fromString(value) {\n    let params = {\n      type: \"function\"\n    };\n    value = parseGas(value, params);\n    let comps = value.split(\" returns \");\n\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid function string\", \"value\", value);\n    }\n\n    let parens = comps[0].match(regexParen);\n\n    if (!parens) {\n      logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n    }\n\n    params.name = parens[1].trim();\n\n    if (params.name) {\n      verifyIdentifier(params.name);\n    }\n\n    params.inputs = parseParams(parens[2], false);\n    parseModifiers(parens[3].trim(), params); // We have outputs\n\n    if (comps.length > 1) {\n      let returns = comps[1].match(regexParen);\n\n      if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n        logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n      }\n\n      params.outputs = parseParams(returns[2], false);\n    } else {\n      params.outputs = [];\n    }\n\n    return FunctionFragment.fromObject(params);\n  }\n\n  static isFunctionFragment(value) {\n    return value && value._isFragment && value.type === \"function\";\n  }\n\n} //export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment) {\n  const sig = fragment.format();\n\n  if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n    logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n  }\n\n  return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"error\",\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n\n    let result = \"\";\n\n    if (format !== FormatTypes.sighash) {\n      result += \"error \";\n    }\n\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n    return result.trim();\n  }\n\n  static from(value) {\n    if (typeof value === \"string\") {\n      return ErrorFragment.fromString(value);\n    }\n\n    return ErrorFragment.fromObject(value);\n  }\n\n  static fromObject(value) {\n    if (ErrorFragment.isErrorFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"error\") {\n      logger.throwArgumentError(\"invalid error object\", \"value\", value);\n    }\n\n    const params = {\n      type: value.type,\n      name: verifyIdentifier(value.name),\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n    };\n    return checkForbidden(new ErrorFragment(_constructorGuard, params));\n  }\n\n  static fromString(value) {\n    let params = {\n      type: \"error\"\n    };\n    let parens = value.match(regexParen);\n\n    if (!parens) {\n      logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n    }\n\n    params.name = parens[1].trim();\n\n    if (params.name) {\n      verifyIdentifier(params.name);\n    }\n\n    params.inputs = parseParams(parens[2], false);\n    return checkForbidden(ErrorFragment.fromObject(params));\n  }\n\n  static isErrorFragment(value) {\n    return value && value._isFragment && value.type === \"error\";\n  }\n\n}\n\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  } // @TODO: more verification\n\n\n  return type;\n} // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\n\n\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\n\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n  }\n\n  return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value) {\n  value = value.trim();\n  let result = [];\n  let accum = \"\";\n  let depth = 0;\n\n  for (let offset = 0; offset < value.length; offset++) {\n    let c = value[offset];\n\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n\n  if (accum) {\n    result.push(accum);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../src.ts/fragments.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}