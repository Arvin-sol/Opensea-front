{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar _1 = require(\".\");\n\nvar TransactionFactory =\n/** @class */\nfunction () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n\n\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n      }\n    }\n  };\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n\n        case 2:\n          EIP = 1559;\n          break;\n\n        default:\n          throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n      }\n\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n\n\n  TransactionFactory.getTransactionClass = function (transactionID, _common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n\n      default:\n        throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n    }\n  };\n\n  return TransactionFactory;\n}();\n\nexports.default = TransactionFactory;","map":{"version":3,"sources":["../src/transactionFactory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */ (function () {\n    // It is not possible to instantiate a TransactionFactory object.\n    function TransactionFactory() {\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    TransactionFactory.fromTxData = function (txData, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n            if (txType === 0) {\n                return _1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n            }\n        }\n    };\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromSerializedData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            var EIP = void 0;\n            switch (data[0]) {\n                case 1:\n                    EIP = 2930;\n                    break;\n                case 2:\n                    EIP = 1559;\n                    break;\n                default:\n                    throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n            }\n            if (EIP === 1559) {\n                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n            }\n            else {\n                // EIP === 2930\n                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n            }\n        }\n        else {\n            return _1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    };\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    };\n    /**\n     * This helper method allows one to retrieve the class which matches the transactionID\n     * If transactionID is undefined, returns the legacy transaction class.\n     * @deprecated - This method is deprecated and will be removed on the next major release\n     * @param transactionID\n     * @param _common - This option is not used\n     */\n    TransactionFactory.getTransactionClass = function (transactionID, _common) {\n        if (transactionID === void 0) { transactionID = 0; }\n        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);\n        if (legacyTxn) {\n            return _1.Transaction;\n        }\n        switch (transactionID) {\n            case 1:\n                return _1.AccessListEIP2930Transaction;\n            case 2:\n                return _1.FeeMarketEIP1559Transaction;\n            default:\n                throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n        }\n    };\n    return TransactionFactory;\n}());\nexports.default = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map"]},"metadata":{},"sourceType":"script"}