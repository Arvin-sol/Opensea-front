{"ast":null,"code":"const BN = require(\"bn.js\");\n\nconst Bytes = require(\"./bytes\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};","map":{"version":3,"names":["BN","require","Bytes","fromBN","bn","toString","toBN","str","slice","fromString","toEther","wei","toNumber","div","fromEther","eth","mul","fromNumber","Math","floor","a","test","toUint256","pad","bin","method","b","add","sub","module","exports"],"sources":["C:/Users/Lenovo/Desktop/OpenSea web3/my-app/node_modules/eth-lib/lib/nat.js"],"sourcesContent":["const BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAlB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,MAAM,GAAGC,EAAE,IAAI,OAAOA,EAAE,CAACC,QAAH,CAAY,KAAZ,CAA5B;;AAEA,MAAMC,IAAI,GAAGC,GAAG,IAAI,IAAIP,EAAJ,CAAOO,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP,EAAqB,EAArB,CAApB;;AAEA,MAAMC,UAAU,GAAGF,GAAG,IAAI;EACxB,MAAMH,EAAE,GAAG,OAAO,CAACG,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,IAApB,GAA2B,IAAIR,EAAJ,CAAOO,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAP,EAAqB,EAArB,CAA3B,GAAsD,IAAIR,EAAJ,CAAOO,GAAP,EAAY,EAAZ,CAAvD,EAAwEF,QAAxE,CAAiF,KAAjF,CAAlB;EACA,OAAOD,EAAE,KAAK,KAAP,GAAe,IAAf,GAAsBA,EAA7B;AACD,CAHD;;AAKA,MAAMM,OAAO,GAAGC,GAAG,IAAIC,QAAQ,CAACC,GAAG,CAACF,GAAD,EAAMF,UAAU,CAAC,aAAD,CAAhB,CAAJ,CAAR,GAAgD,SAAvE;;AAEA,MAAMK,SAAS,GAAGC,GAAG,IAAIC,GAAG,CAACC,UAAU,CAACC,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,SAAjB,CAAD,CAAX,EAA0CN,UAAU,CAAC,aAAD,CAApD,CAA5B;;AAEA,MAAMJ,QAAQ,GAAGe,CAAC,IAAId,IAAI,CAACc,CAAD,CAAJ,CAAQf,QAAR,CAAiB,EAAjB,CAAtB;;AAEA,MAAMY,UAAU,GAAGG,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,GAAwB,MAAMC,IAAN,CAAWD,CAAX,IAAgBA,CAAhB,GAAoB,OAAOA,CAAnD,GAAuD,OAAO,IAAIpB,EAAJ,CAAOoB,CAAP,EAAUf,QAAV,CAAmB,KAAnB,CAAtF;;AAEA,MAAMO,QAAQ,GAAGQ,CAAC,IAAId,IAAI,CAACc,CAAD,CAAJ,CAAQR,QAAR,EAAtB;;AAEA,MAAMU,SAAS,GAAGF,CAAC,IAAIlB,KAAK,CAACqB,GAAN,CAAU,EAAV,EAAcH,CAAd,CAAvB;;AAEA,MAAMI,GAAG,GAAGC,MAAM,IAAI,CAACL,CAAD,EAAIM,CAAJ,KAAUvB,MAAM,CAACG,IAAI,CAACc,CAAD,CAAJ,CAAQK,MAAR,EAAgBnB,IAAI,CAACoB,CAAD,CAApB,CAAD,CAAtC;;AAEA,MAAMC,GAAG,GAAGH,GAAG,CAAC,KAAD,CAAf;AACA,MAAMR,GAAG,GAAGQ,GAAG,CAAC,KAAD,CAAf;AACA,MAAMX,GAAG,GAAGW,GAAG,CAAC,KAAD,CAAf;AACA,MAAMI,GAAG,GAAGJ,GAAG,CAAC,KAAD,CAAf;AAEAK,MAAM,CAACC,OAAP,GAAiB;EACfzB,QADe;EAEfI,UAFe;EAGfG,QAHe;EAIfK,UAJe;EAKfP,OALe;EAMfI,SANe;EAOfQ,SAPe;EAQfK,GARe;EASfX,GATe;EAUfH,GAVe;EAWfe;AAXe,CAAjB"},"metadata":{},"sourceType":"script"}